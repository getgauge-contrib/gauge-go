//----------------------------------------------------------------
//  Copyright (c) ThoughtWorks, Inc.
//  Licensed under the Apache License, Version 2.0
//  See LICENSE in the project root for license information.
//----------------------------------------------------------------

// The comments are exported to Markdown, hence they may contain markdown syntax and cross-refs.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: messages.proto

package gauge_messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StepValidateResponse_ErrorType int32

const (
	StepValidateResponse_STEP_IMPLEMENTATION_NOT_FOUND StepValidateResponse_ErrorType = 0
	StepValidateResponse_DUPLICATE_STEP_IMPLEMENTATION StepValidateResponse_ErrorType = 1
)

// Enum value maps for StepValidateResponse_ErrorType.
var (
	StepValidateResponse_ErrorType_name = map[int32]string{
		0: "STEP_IMPLEMENTATION_NOT_FOUND",
		1: "DUPLICATE_STEP_IMPLEMENTATION",
	}
	StepValidateResponse_ErrorType_value = map[string]int32{
		"STEP_IMPLEMENTATION_NOT_FOUND": 0,
		"DUPLICATE_STEP_IMPLEMENTATION": 1,
	}
)

func (x StepValidateResponse_ErrorType) Enum() *StepValidateResponse_ErrorType {
	p := new(StepValidateResponse_ErrorType)
	*p = x
	return p
}

func (x StepValidateResponse_ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StepValidateResponse_ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[0].Descriptor()
}

func (StepValidateResponse_ErrorType) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[0]
}

func (x StepValidateResponse_ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StepValidateResponse_ErrorType.Descriptor instead.
func (StepValidateResponse_ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{20, 0}
}

type CacheFileRequest_FileStatus int32

const (
	// / The file content was changed in the client
	CacheFileRequest_CHANGED CacheFileRequest_FileStatus = 0
	// / The file was closed in the client
	CacheFileRequest_CLOSED CacheFileRequest_FileStatus = 1
	// / The file was created on the client
	CacheFileRequest_CREATED CacheFileRequest_FileStatus = 2
	// / The file was deleted on the client
	CacheFileRequest_DELETED CacheFileRequest_FileStatus = 3
	// / The file is opened in the client
	CacheFileRequest_OPENED CacheFileRequest_FileStatus = 4
)

// Enum value maps for CacheFileRequest_FileStatus.
var (
	CacheFileRequest_FileStatus_name = map[int32]string{
		0: "CHANGED",
		1: "CLOSED",
		2: "CREATED",
		3: "DELETED",
		4: "OPENED",
	}
	CacheFileRequest_FileStatus_value = map[string]int32{
		"CHANGED": 0,
		"CLOSED":  1,
		"CREATED": 2,
		"DELETED": 3,
		"OPENED":  4,
	}
)

func (x CacheFileRequest_FileStatus) Enum() *CacheFileRequest_FileStatus {
	p := new(CacheFileRequest_FileStatus)
	*p = x
	return p
}

func (x CacheFileRequest_FileStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CacheFileRequest_FileStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[1].Descriptor()
}

func (CacheFileRequest_FileStatus) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[1]
}

func (x CacheFileRequest_FileStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CacheFileRequest_FileStatus.Descriptor instead.
func (CacheFileRequest_FileStatus) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{35, 0}
}

type Message_MessageType int32

const (
	Message_ExecutionStarting                     Message_MessageType = 0
	Message_SpecExecutionStarting                 Message_MessageType = 1
	Message_SpecExecutionEnding                   Message_MessageType = 2
	Message_ScenarioExecutionStarting             Message_MessageType = 3
	Message_ScenarioExecutionEnding               Message_MessageType = 4
	Message_StepExecutionStarting                 Message_MessageType = 5
	Message_StepExecutionEnding                   Message_MessageType = 6
	Message_ExecuteStep                           Message_MessageType = 7
	Message_ExecutionEnding                       Message_MessageType = 8
	Message_StepValidateRequest                   Message_MessageType = 9
	Message_StepValidateResponse                  Message_MessageType = 10
	Message_ExecutionStatusResponse               Message_MessageType = 11
	Message_StepNamesRequest                      Message_MessageType = 12
	Message_StepNamesResponse                     Message_MessageType = 13
	Message_KillProcessRequest                    Message_MessageType = 14
	Message_SuiteExecutionResult                  Message_MessageType = 15
	Message_ScenarioDataStoreInit                 Message_MessageType = 16
	Message_SpecDataStoreInit                     Message_MessageType = 17
	Message_SuiteDataStoreInit                    Message_MessageType = 18
	Message_StepNameRequest                       Message_MessageType = 19
	Message_StepNameResponse                      Message_MessageType = 20
	Message_RefactorRequest                       Message_MessageType = 21
	Message_RefactorResponse                      Message_MessageType = 22
	Message_UnsupportedMessageResponse            Message_MessageType = 23
	Message_CacheFileRequest                      Message_MessageType = 24
	Message_StepPositionsRequest                  Message_MessageType = 25
	Message_StepPositionsResponse                 Message_MessageType = 26
	Message_ImplementationFileListRequest         Message_MessageType = 27
	Message_ImplementationFileListResponse        Message_MessageType = 28
	Message_StubImplementationCodeRequest         Message_MessageType = 29
	Message_FileDiff                              Message_MessageType = 30
	Message_ImplementationFileGlobPatternRequest  Message_MessageType = 31
	Message_ImplementationFileGlobPatternResponse Message_MessageType = 32
	Message_SuiteExecutionResultItem              Message_MessageType = 33
	Message_KeepAlive                             Message_MessageType = 34
	Message_ConceptExecutionStarting              Message_MessageType = 35
	Message_ConceptExecutionEnding                Message_MessageType = 36
)

// Enum value maps for Message_MessageType.
var (
	Message_MessageType_name = map[int32]string{
		0:  "ExecutionStarting",
		1:  "SpecExecutionStarting",
		2:  "SpecExecutionEnding",
		3:  "ScenarioExecutionStarting",
		4:  "ScenarioExecutionEnding",
		5:  "StepExecutionStarting",
		6:  "StepExecutionEnding",
		7:  "ExecuteStep",
		8:  "ExecutionEnding",
		9:  "StepValidateRequest",
		10: "StepValidateResponse",
		11: "ExecutionStatusResponse",
		12: "StepNamesRequest",
		13: "StepNamesResponse",
		14: "KillProcessRequest",
		15: "SuiteExecutionResult",
		16: "ScenarioDataStoreInit",
		17: "SpecDataStoreInit",
		18: "SuiteDataStoreInit",
		19: "StepNameRequest",
		20: "StepNameResponse",
		21: "RefactorRequest",
		22: "RefactorResponse",
		23: "UnsupportedMessageResponse",
		24: "CacheFileRequest",
		25: "StepPositionsRequest",
		26: "StepPositionsResponse",
		27: "ImplementationFileListRequest",
		28: "ImplementationFileListResponse",
		29: "StubImplementationCodeRequest",
		30: "FileDiff",
		31: "ImplementationFileGlobPatternRequest",
		32: "ImplementationFileGlobPatternResponse",
		33: "SuiteExecutionResultItem",
		34: "KeepAlive",
		35: "ConceptExecutionStarting",
		36: "ConceptExecutionEnding",
	}
	Message_MessageType_value = map[string]int32{
		"ExecutionStarting":                     0,
		"SpecExecutionStarting":                 1,
		"SpecExecutionEnding":                   2,
		"ScenarioExecutionStarting":             3,
		"ScenarioExecutionEnding":               4,
		"StepExecutionStarting":                 5,
		"StepExecutionEnding":                   6,
		"ExecuteStep":                           7,
		"ExecutionEnding":                       8,
		"StepValidateRequest":                   9,
		"StepValidateResponse":                  10,
		"ExecutionStatusResponse":               11,
		"StepNamesRequest":                      12,
		"StepNamesResponse":                     13,
		"KillProcessRequest":                    14,
		"SuiteExecutionResult":                  15,
		"ScenarioDataStoreInit":                 16,
		"SpecDataStoreInit":                     17,
		"SuiteDataStoreInit":                    18,
		"StepNameRequest":                       19,
		"StepNameResponse":                      20,
		"RefactorRequest":                       21,
		"RefactorResponse":                      22,
		"UnsupportedMessageResponse":            23,
		"CacheFileRequest":                      24,
		"StepPositionsRequest":                  25,
		"StepPositionsResponse":                 26,
		"ImplementationFileListRequest":         27,
		"ImplementationFileListResponse":        28,
		"StubImplementationCodeRequest":         29,
		"FileDiff":                              30,
		"ImplementationFileGlobPatternRequest":  31,
		"ImplementationFileGlobPatternResponse": 32,
		"SuiteExecutionResultItem":              33,
		"KeepAlive":                             34,
		"ConceptExecutionStarting":              35,
		"ConceptExecutionEnding":                36,
	}
)

func (x Message_MessageType) Enum() *Message_MessageType {
	p := new(Message_MessageType)
	*p = x
	return p
}

func (x Message_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[2].Descriptor()
}

func (Message_MessageType) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[2]
}

func (x Message_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_MessageType.Descriptor instead.
func (Message_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{48, 0}
}

// / Default request. Tells the runner to shutdown.
type KillProcessRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KillProcessRequest) Reset() {
	*x = KillProcessRequest{}
	mi := &file_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KillProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillProcessRequest) ProtoMessage() {}

func (x *KillProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillProcessRequest.ProtoReflect.Descriptor instead.
func (*KillProcessRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0}
}

// / Sends to any request which needs a execution status as response
// / usually step execution, hooks etc will return this
type ExecutionStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Holds the suite result after suite execution done.
	ExecutionResult *ProtoExecutionResult `protobuf:"bytes,1,opt,name=executionResult,proto3" json:"executionResult,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ExecutionStatusResponse) Reset() {
	*x = ExecutionStatusResponse{}
	mi := &file_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatusResponse) ProtoMessage() {}

func (x *ExecutionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatusResponse.ProtoReflect.Descriptor instead.
func (*ExecutionStatusResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{1}
}

func (x *ExecutionStatusResponse) GetExecutionResult() *ProtoExecutionResult {
	if x != nil {
		return x.ExecutionResult
	}
	return nil
}

// / Sent at start of Suite Execution. Tells the runner to execute `before_suite` hook.
type ExecutionStartingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Holds the current suite execution info.
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo,proto3" json:"currentExecutionInfo,omitempty"`
	// / Holds the suite result in execution starting.
	// / Some fields will not be populated before execution.
	SuiteResult   *ProtoSuiteResult `protobuf:"bytes,2,opt,name=suiteResult,proto3" json:"suiteResult,omitempty"`
	Stream        int32             `protobuf:"varint,3,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutionStartingRequest) Reset() {
	*x = ExecutionStartingRequest{}
	mi := &file_messages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionStartingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStartingRequest) ProtoMessage() {}

func (x *ExecutionStartingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStartingRequest.ProtoReflect.Descriptor instead.
func (*ExecutionStartingRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{2}
}

func (x *ExecutionStartingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if x != nil {
		return x.CurrentExecutionInfo
	}
	return nil
}

func (x *ExecutionStartingRequest) GetSuiteResult() *ProtoSuiteResult {
	if x != nil {
		return x.SuiteResult
	}
	return nil
}

func (x *ExecutionStartingRequest) GetStream() int32 {
	if x != nil {
		return x.Stream
	}
	return 0
}

// / Sent at end of Suite Execution. Tells the runner to execute `after_suite` hook.
type ExecutionEndingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Holds the current suite execution info.
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo,proto3" json:"currentExecutionInfo,omitempty"`
	// / Holds the suite result in execution ending.
	SuiteResult   *ProtoSuiteResult `protobuf:"bytes,2,opt,name=suiteResult,proto3" json:"suiteResult,omitempty"`
	Stream        int32             `protobuf:"varint,3,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutionEndingRequest) Reset() {
	*x = ExecutionEndingRequest{}
	mi := &file_messages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionEndingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionEndingRequest) ProtoMessage() {}

func (x *ExecutionEndingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionEndingRequest.ProtoReflect.Descriptor instead.
func (*ExecutionEndingRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{3}
}

func (x *ExecutionEndingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if x != nil {
		return x.CurrentExecutionInfo
	}
	return nil
}

func (x *ExecutionEndingRequest) GetSuiteResult() *ProtoSuiteResult {
	if x != nil {
		return x.SuiteResult
	}
	return nil
}

func (x *ExecutionEndingRequest) GetStream() int32 {
	if x != nil {
		return x.Stream
	}
	return 0
}

// / Sent at start of Spec Execution. Tells the runner to execute `before_spec` hook.
type SpecExecutionStartingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Holds the current spec execution info.
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo,proto3" json:"currentExecutionInfo,omitempty"`
	// / Holds the specs result in spec execution starting.
	// / Some fields will not be populated before execution.
	SpecResult    *ProtoSpecResult `protobuf:"bytes,2,opt,name=specResult,proto3" json:"specResult,omitempty"`
	Stream        int32            `protobuf:"varint,3,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecExecutionStartingRequest) Reset() {
	*x = SpecExecutionStartingRequest{}
	mi := &file_messages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecExecutionStartingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecExecutionStartingRequest) ProtoMessage() {}

func (x *SpecExecutionStartingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecExecutionStartingRequest.ProtoReflect.Descriptor instead.
func (*SpecExecutionStartingRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{4}
}

func (x *SpecExecutionStartingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if x != nil {
		return x.CurrentExecutionInfo
	}
	return nil
}

func (x *SpecExecutionStartingRequest) GetSpecResult() *ProtoSpecResult {
	if x != nil {
		return x.SpecResult
	}
	return nil
}

func (x *SpecExecutionStartingRequest) GetStream() int32 {
	if x != nil {
		return x.Stream
	}
	return 0
}

// / Sent at end of Spec Execution. Tells the runner to execute `after_spec` hook.
type SpecExecutionEndingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Holds the current spec execution info.
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo,proto3" json:"currentExecutionInfo,omitempty"`
	// / Holds the specs result in spec execution ending.
	SpecResult    *ProtoSpecResult `protobuf:"bytes,2,opt,name=specResult,proto3" json:"specResult,omitempty"`
	Stream        int32            `protobuf:"varint,3,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecExecutionEndingRequest) Reset() {
	*x = SpecExecutionEndingRequest{}
	mi := &file_messages_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecExecutionEndingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecExecutionEndingRequest) ProtoMessage() {}

func (x *SpecExecutionEndingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecExecutionEndingRequest.ProtoReflect.Descriptor instead.
func (*SpecExecutionEndingRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{5}
}

func (x *SpecExecutionEndingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if x != nil {
		return x.CurrentExecutionInfo
	}
	return nil
}

func (x *SpecExecutionEndingRequest) GetSpecResult() *ProtoSpecResult {
	if x != nil {
		return x.SpecResult
	}
	return nil
}

func (x *SpecExecutionEndingRequest) GetStream() int32 {
	if x != nil {
		return x.Stream
	}
	return 0
}

// / Sent at start of Scenario Execution. Tells the runner to execute `before_scenario` hook.
type ScenarioExecutionStartingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Holds the current sceanrio execution info.
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo,proto3" json:"currentExecutionInfo,omitempty"`
	// / Holds the scenarion result in scenarion execution starting.
	// / Some fields will not be populated before execution.
	ScenarioResult *ProtoScenarioResult `protobuf:"bytes,2,opt,name=scenarioResult,proto3" json:"scenarioResult,omitempty"`
	Stream         int32                `protobuf:"varint,3,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ScenarioExecutionStartingRequest) Reset() {
	*x = ScenarioExecutionStartingRequest{}
	mi := &file_messages_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScenarioExecutionStartingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioExecutionStartingRequest) ProtoMessage() {}

func (x *ScenarioExecutionStartingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioExecutionStartingRequest.ProtoReflect.Descriptor instead.
func (*ScenarioExecutionStartingRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{6}
}

func (x *ScenarioExecutionStartingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if x != nil {
		return x.CurrentExecutionInfo
	}
	return nil
}

func (x *ScenarioExecutionStartingRequest) GetScenarioResult() *ProtoScenarioResult {
	if x != nil {
		return x.ScenarioResult
	}
	return nil
}

func (x *ScenarioExecutionStartingRequest) GetStream() int32 {
	if x != nil {
		return x.Stream
	}
	return 0
}

// / Sent at end of Scenario Execution. Tells the runner to execute `after_scenario` hook.
type ScenarioExecutionEndingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Holds the current scenario execution info.
	CurrentExecutionInfo *ExecutionInfo       `protobuf:"bytes,1,opt,name=currentExecutionInfo,proto3" json:"currentExecutionInfo,omitempty"`
	ScenarioResult       *ProtoScenarioResult `protobuf:"bytes,2,opt,name=scenarioResult,proto3" json:"scenarioResult,omitempty"`
	Stream               int32                `protobuf:"varint,3,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ScenarioExecutionEndingRequest) Reset() {
	*x = ScenarioExecutionEndingRequest{}
	mi := &file_messages_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScenarioExecutionEndingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioExecutionEndingRequest) ProtoMessage() {}

func (x *ScenarioExecutionEndingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioExecutionEndingRequest.ProtoReflect.Descriptor instead.
func (*ScenarioExecutionEndingRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{7}
}

func (x *ScenarioExecutionEndingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if x != nil {
		return x.CurrentExecutionInfo
	}
	return nil
}

func (x *ScenarioExecutionEndingRequest) GetScenarioResult() *ProtoScenarioResult {
	if x != nil {
		return x.ScenarioResult
	}
	return nil
}

func (x *ScenarioExecutionEndingRequest) GetStream() int32 {
	if x != nil {
		return x.Stream
	}
	return 0
}

// / Sent at start of Step Execution. Tells the runner to execute `before_step` hook.
type StepExecutionStartingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Holds the current step execution info.
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo,proto3" json:"currentExecutionInfo,omitempty"`
	// / Holds step result in step execution starting.
	// / Some fields will not be populated before execution.
	StepResult    *ProtoStepResult `protobuf:"bytes,2,opt,name=stepResult,proto3" json:"stepResult,omitempty"`
	Stream        int32            `protobuf:"varint,3,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepExecutionStartingRequest) Reset() {
	*x = StepExecutionStartingRequest{}
	mi := &file_messages_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepExecutionStartingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepExecutionStartingRequest) ProtoMessage() {}

func (x *StepExecutionStartingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepExecutionStartingRequest.ProtoReflect.Descriptor instead.
func (*StepExecutionStartingRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{8}
}

func (x *StepExecutionStartingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if x != nil {
		return x.CurrentExecutionInfo
	}
	return nil
}

func (x *StepExecutionStartingRequest) GetStepResult() *ProtoStepResult {
	if x != nil {
		return x.StepResult
	}
	return nil
}

func (x *StepExecutionStartingRequest) GetStream() int32 {
	if x != nil {
		return x.Stream
	}
	return 0
}

// / Sent at end of Step Execution. Tells the runner to execute `after_step` hook.
type StepExecutionEndingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Holds the current step execution info.
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo,proto3" json:"currentExecutionInfo,omitempty"`
	// / Holds step result in step execution ending.
	StepResult    *ProtoStepResult `protobuf:"bytes,2,opt,name=stepResult,proto3" json:"stepResult,omitempty"`
	Stream        int32            `protobuf:"varint,3,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepExecutionEndingRequest) Reset() {
	*x = StepExecutionEndingRequest{}
	mi := &file_messages_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepExecutionEndingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepExecutionEndingRequest) ProtoMessage() {}

func (x *StepExecutionEndingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepExecutionEndingRequest.ProtoReflect.Descriptor instead.
func (*StepExecutionEndingRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{9}
}

func (x *StepExecutionEndingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if x != nil {
		return x.CurrentExecutionInfo
	}
	return nil
}

func (x *StepExecutionEndingRequest) GetStepResult() *ProtoStepResult {
	if x != nil {
		return x.StepResult
	}
	return nil
}

func (x *StepExecutionEndingRequest) GetStream() int32 {
	if x != nil {
		return x.Stream
	}
	return 0
}

// / Sent at start of Concept Execution.
type ConceptExecutionStartingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Holds the current step execution info.
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo,proto3" json:"currentExecutionInfo,omitempty"`
	// / Holds step result in step execution starting.
	// / Some fields will not be populated before execution.
	StepResult    *ProtoStepResult `protobuf:"bytes,2,opt,name=stepResult,proto3" json:"stepResult,omitempty"`
	Stream        int32            `protobuf:"varint,3,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConceptExecutionStartingRequest) Reset() {
	*x = ConceptExecutionStartingRequest{}
	mi := &file_messages_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConceptExecutionStartingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptExecutionStartingRequest) ProtoMessage() {}

func (x *ConceptExecutionStartingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptExecutionStartingRequest.ProtoReflect.Descriptor instead.
func (*ConceptExecutionStartingRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{10}
}

func (x *ConceptExecutionStartingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if x != nil {
		return x.CurrentExecutionInfo
	}
	return nil
}

func (x *ConceptExecutionStartingRequest) GetStepResult() *ProtoStepResult {
	if x != nil {
		return x.StepResult
	}
	return nil
}

func (x *ConceptExecutionStartingRequest) GetStream() int32 {
	if x != nil {
		return x.Stream
	}
	return 0
}

// / Sent at end of Concept Execution.
type ConceptExecutionEndingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Holds the current step execution info.
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo,proto3" json:"currentExecutionInfo,omitempty"`
	// / Holds step result in step execution ending.
	StepResult    *ProtoStepResult `protobuf:"bytes,2,opt,name=stepResult,proto3" json:"stepResult,omitempty"`
	Stream        int32            `protobuf:"varint,3,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConceptExecutionEndingRequest) Reset() {
	*x = ConceptExecutionEndingRequest{}
	mi := &file_messages_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConceptExecutionEndingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptExecutionEndingRequest) ProtoMessage() {}

func (x *ConceptExecutionEndingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptExecutionEndingRequest.ProtoReflect.Descriptor instead.
func (*ConceptExecutionEndingRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{11}
}

func (x *ConceptExecutionEndingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if x != nil {
		return x.CurrentExecutionInfo
	}
	return nil
}

func (x *ConceptExecutionEndingRequest) GetStepResult() *ProtoStepResult {
	if x != nil {
		return x.StepResult
	}
	return nil
}

func (x *ConceptExecutionEndingRequest) GetStream() int32 {
	if x != nil {
		return x.Stream
	}
	return 0
}

// / Contains command line arguments which passed by user during execution.
type ExecutionArg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Holds the flag name passed from command line.
	FlagName string `protobuf:"bytes,1,opt,name=flagName,proto3" json:"flagName,omitempty"`
	// / Holds the flag value passed from command line.
	FlagValue     []string `protobuf:"bytes,2,rep,name=flagValue,proto3" json:"flagValue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutionArg) Reset() {
	*x = ExecutionArg{}
	mi := &file_messages_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionArg) ProtoMessage() {}

func (x *ExecutionArg) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionArg.ProtoReflect.Descriptor instead.
func (*ExecutionArg) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{12}
}

func (x *ExecutionArg) GetFlagName() string {
	if x != nil {
		return x.FlagName
	}
	return ""
}

func (x *ExecutionArg) GetFlagValue() []string {
	if x != nil {
		return x.FlagValue
	}
	return nil
}

// / Contains details of the execution.
// / Depending on the context (Step, Scenario, Spec or Suite), the respective fields are set.
type ExecutionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Holds the information of the current Spec. Valid in context of Spec execution.
	CurrentSpec *SpecInfo `protobuf:"bytes,1,opt,name=currentSpec,proto3" json:"currentSpec,omitempty"`
	// / Holds the information of the current Scenario. Valid in context of Scenario execution.
	CurrentScenario *ScenarioInfo `protobuf:"bytes,2,opt,name=currentScenario,proto3" json:"currentScenario,omitempty"`
	// / Holds the information of the current Step. Valid in context of Step execution.
	CurrentStep *StepInfo `protobuf:"bytes,3,opt,name=currentStep,proto3" json:"currentStep,omitempty"`
	// / Stacktrace of the execution. Valid only if there is an error in execution.
	Stacktrace string `protobuf:"bytes,4,opt,name=stacktrace,proto3" json:"stacktrace,omitempty"`
	// / Holds the project name
	ProjectName string `protobuf:"bytes,5,opt,name=projectName,proto3" json:"projectName,omitempty"`
	// / Holds the command line arguments.
	ExecutionArgs []*ExecutionArg `protobuf:"bytes,6,rep,name=ExecutionArgs,proto3" json:"ExecutionArgs,omitempty"`
	// / Holds the number of running execution streams.
	NumberOfExecutionStreams int32 `protobuf:"varint,7,opt,name=numberOfExecutionStreams,proto3" json:"numberOfExecutionStreams,omitempty"`
	// / Holds the runner id for parallel execution.
	RunnerId      int32 `protobuf:"varint,8,opt,name=runnerId,proto3" json:"runnerId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutionInfo) Reset() {
	*x = ExecutionInfo{}
	mi := &file_messages_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionInfo) ProtoMessage() {}

func (x *ExecutionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionInfo.ProtoReflect.Descriptor instead.
func (*ExecutionInfo) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{13}
}

func (x *ExecutionInfo) GetCurrentSpec() *SpecInfo {
	if x != nil {
		return x.CurrentSpec
	}
	return nil
}

func (x *ExecutionInfo) GetCurrentScenario() *ScenarioInfo {
	if x != nil {
		return x.CurrentScenario
	}
	return nil
}

func (x *ExecutionInfo) GetCurrentStep() *StepInfo {
	if x != nil {
		return x.CurrentStep
	}
	return nil
}

func (x *ExecutionInfo) GetStacktrace() string {
	if x != nil {
		return x.Stacktrace
	}
	return ""
}

func (x *ExecutionInfo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ExecutionInfo) GetExecutionArgs() []*ExecutionArg {
	if x != nil {
		return x.ExecutionArgs
	}
	return nil
}

func (x *ExecutionInfo) GetNumberOfExecutionStreams() int32 {
	if x != nil {
		return x.NumberOfExecutionStreams
	}
	return 0
}

func (x *ExecutionInfo) GetRunnerId() int32 {
	if x != nil {
		return x.RunnerId
	}
	return 0
}

// / Contains details of the Spec execution.
type SpecInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Name of the current Spec being executed.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// / Full File path containing the current Spec being executed.
	FileName string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// / Flag to indicate if the current Spec execution failed.
	IsFailed bool `protobuf:"varint,3,opt,name=isFailed,proto3" json:"isFailed,omitempty"`
	// / Tags relevant to the current Spec execution.
	Tags          []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecInfo) Reset() {
	*x = SpecInfo{}
	mi := &file_messages_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecInfo) ProtoMessage() {}

func (x *SpecInfo) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecInfo.ProtoReflect.Descriptor instead.
func (*SpecInfo) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{14}
}

func (x *SpecInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpecInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *SpecInfo) GetIsFailed() bool {
	if x != nil {
		return x.IsFailed
	}
	return false
}

func (x *SpecInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// / Contains details of the Scenario execution.
type ScenarioInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Name of the current Scenario being executed.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// / Flag to indicate if the current Scenario execution failed.
	IsFailed bool `protobuf:"varint,2,opt,name=isFailed,proto3" json:"isFailed,omitempty"`
	// / Tags relevant to the current Scenario execution.
	Tags []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	// / Retries info
	Retries       *ScenarioRetriesInfo `protobuf:"bytes,4,opt,name=retries,proto3" json:"retries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScenarioInfo) Reset() {
	*x = ScenarioInfo{}
	mi := &file_messages_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScenarioInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioInfo) ProtoMessage() {}

func (x *ScenarioInfo) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioInfo.ProtoReflect.Descriptor instead.
func (*ScenarioInfo) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{15}
}

func (x *ScenarioInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScenarioInfo) GetIsFailed() bool {
	if x != nil {
		return x.IsFailed
	}
	return false
}

func (x *ScenarioInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ScenarioInfo) GetRetries() *ScenarioRetriesInfo {
	if x != nil {
		return x.Retries
	}
	return nil
}

// / Contains details of the Scenario repeat execution.
type ScenarioRetriesInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Maximum retries. Related to '--max-retries-count' run parameter
	MaxRetries int32 `protobuf:"varint,1,opt,name=maxRetries,proto3" json:"maxRetries,omitempty"`
	// Current retry attempt. It's 0 for the normal first run
	CurrentRetry  int32 `protobuf:"varint,2,opt,name=currentRetry,proto3" json:"currentRetry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScenarioRetriesInfo) Reset() {
	*x = ScenarioRetriesInfo{}
	mi := &file_messages_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScenarioRetriesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioRetriesInfo) ProtoMessage() {}

func (x *ScenarioRetriesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioRetriesInfo.ProtoReflect.Descriptor instead.
func (*ScenarioRetriesInfo) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{16}
}

func (x *ScenarioRetriesInfo) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *ScenarioRetriesInfo) GetCurrentRetry() int32 {
	if x != nil {
		return x.CurrentRetry
	}
	return 0
}

// / Contains details of the Step execution.
type StepInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / The current request to execute Step
	Step *ExecuteStepRequest `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	// / Flag to indicate if the current Step execution failed.
	IsFailed bool `protobuf:"varint,2,opt,name=isFailed,proto3" json:"isFailed,omitempty"`
	// / The current stack trace in case of failure
	StackTrace string `protobuf:"bytes,3,opt,name=stackTrace,proto3" json:"stackTrace,omitempty"`
	// / The error message in case of failure
	ErrorMessage  string `protobuf:"bytes,4,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepInfo) Reset() {
	*x = StepInfo{}
	mi := &file_messages_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepInfo) ProtoMessage() {}

func (x *StepInfo) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepInfo.ProtoReflect.Descriptor instead.
func (*StepInfo) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{17}
}

func (x *StepInfo) GetStep() *ExecuteStepRequest {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *StepInfo) GetIsFailed() bool {
	if x != nil {
		return x.IsFailed
	}
	return false
}

func (x *StepInfo) GetStackTrace() string {
	if x != nil {
		return x.StackTrace
	}
	return ""
}

func (x *StepInfo) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// / Request sent ot the runner to Execute a Step
type ExecuteStepRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Contains the actual text of the Step being executed.
	// / This contains the parameters as defined in the Spec.
	ActualStepText string `protobuf:"bytes,1,opt,name=actualStepText,proto3" json:"actualStepText,omitempty"`
	// / Contains the parsed text of the Step being executed.
	// / The paramters are replaced with placeholders.
	ParsedStepText string `protobuf:"bytes,2,opt,name=parsedStepText,proto3" json:"parsedStepText,omitempty"`
	// / Flag to indicate if the execution of the Scenario, containing the current Step, failed.
	ScenarioFailing bool `protobuf:"varint,3,opt,name=scenarioFailing,proto3" json:"scenarioFailing,omitempty"`
	// / Collection of parameters applicable to the current Step.
	Parameters    []*Parameter `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty"`
	Stream        int32        `protobuf:"varint,5,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteStepRequest) Reset() {
	*x = ExecuteStepRequest{}
	mi := &file_messages_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteStepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteStepRequest) ProtoMessage() {}

func (x *ExecuteStepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteStepRequest.ProtoReflect.Descriptor instead.
func (*ExecuteStepRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{18}
}

func (x *ExecuteStepRequest) GetActualStepText() string {
	if x != nil {
		return x.ActualStepText
	}
	return ""
}

func (x *ExecuteStepRequest) GetParsedStepText() string {
	if x != nil {
		return x.ParsedStepText
	}
	return ""
}

func (x *ExecuteStepRequest) GetScenarioFailing() bool {
	if x != nil {
		return x.ScenarioFailing
	}
	return false
}

func (x *ExecuteStepRequest) GetParameters() []*Parameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ExecuteStepRequest) GetStream() int32 {
	if x != nil {
		return x.Stream
	}
	return 0
}

// / Request sent ot the runner to check if given Step is valid.
// / The runner should check if there is an implementation defined for the given Step Text.
type StepValidateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / The text is used to lookup Step implementation
	StepText string `protobuf:"bytes,1,opt,name=stepText,proto3" json:"stepText,omitempty"`
	// / The number of paramters in the Step
	NumberOfParameters int32 `protobuf:"varint,2,opt,name=numberOfParameters,proto3" json:"numberOfParameters,omitempty"`
	// /This is use to generate step implementation template
	StepValue     *ProtoStepValue `protobuf:"bytes,3,opt,name=stepValue,proto3" json:"stepValue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepValidateRequest) Reset() {
	*x = StepValidateRequest{}
	mi := &file_messages_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepValidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepValidateRequest) ProtoMessage() {}

func (x *StepValidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepValidateRequest.ProtoReflect.Descriptor instead.
func (*StepValidateRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{19}
}

func (x *StepValidateRequest) GetStepText() string {
	if x != nil {
		return x.StepText
	}
	return ""
}

func (x *StepValidateRequest) GetNumberOfParameters() int32 {
	if x != nil {
		return x.NumberOfParameters
	}
	return 0
}

func (x *StepValidateRequest) GetStepValue() *ProtoStepValue {
	if x != nil {
		return x.StepValue
	}
	return nil
}

// / Response of StepValidateRequest.
// / The runner tells the caller if the Request was valid,
// / i.e. an implementation exists for given Step text.
// / Returns an error message if it is an error response.
type StepValidateResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	IsValid       bool                           `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
	ErrorMessage  string                         `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	ErrorType     StepValidateResponse_ErrorType `protobuf:"varint,3,opt,name=errorType,proto3,enum=gauge.messages.StepValidateResponse_ErrorType" json:"errorType,omitempty"`
	Suggestion    string                         `protobuf:"bytes,4,opt,name=suggestion,proto3" json:"suggestion,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepValidateResponse) Reset() {
	*x = StepValidateResponse{}
	mi := &file_messages_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepValidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepValidateResponse) ProtoMessage() {}

func (x *StepValidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepValidateResponse.ProtoReflect.Descriptor instead.
func (*StepValidateResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{20}
}

func (x *StepValidateResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *StepValidateResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *StepValidateResponse) GetErrorType() StepValidateResponse_ErrorType {
	if x != nil {
		return x.ErrorType
	}
	return StepValidateResponse_STEP_IMPLEMENTATION_NOT_FOUND
}

func (x *StepValidateResponse) GetSuggestion() string {
	if x != nil {
		return x.Suggestion
	}
	return ""
}

// / Result of the Suite Execution.
type SuiteExecutionResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SuiteResult   *ProtoSuiteResult      `protobuf:"bytes,1,opt,name=suiteResult,proto3" json:"suiteResult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SuiteExecutionResult) Reset() {
	*x = SuiteExecutionResult{}
	mi := &file_messages_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuiteExecutionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiteExecutionResult) ProtoMessage() {}

func (x *SuiteExecutionResult) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiteExecutionResult.ProtoReflect.Descriptor instead.
func (*SuiteExecutionResult) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{21}
}

func (x *SuiteExecutionResult) GetSuiteResult() *ProtoSuiteResult {
	if x != nil {
		return x.SuiteResult
	}
	return nil
}

type SuiteExecutionResultItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ResultItem    *ProtoItem             `protobuf:"bytes,1,opt,name=resultItem,proto3" json:"resultItem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SuiteExecutionResultItem) Reset() {
	*x = SuiteExecutionResultItem{}
	mi := &file_messages_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuiteExecutionResultItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiteExecutionResultItem) ProtoMessage() {}

func (x *SuiteExecutionResultItem) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiteExecutionResultItem.ProtoReflect.Descriptor instead.
func (*SuiteExecutionResultItem) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{22}
}

func (x *SuiteExecutionResultItem) GetResultItem() *ProtoItem {
	if x != nil {
		return x.ResultItem
	}
	return nil
}

// / Requests Gauge to give all Step Names.
type StepNamesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepNamesRequest) Reset() {
	*x = StepNamesRequest{}
	mi := &file_messages_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepNamesRequest) ProtoMessage() {}

func (x *StepNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepNamesRequest.ProtoReflect.Descriptor instead.
func (*StepNamesRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{23}
}

// / Response to StepNamesRequest
type StepNamesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Collection of strings corresponding to Step texts.
	Steps         []string `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepNamesResponse) Reset() {
	*x = StepNamesResponse{}
	mi := &file_messages_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepNamesResponse) ProtoMessage() {}

func (x *StepNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepNamesResponse.ProtoReflect.Descriptor instead.
func (*StepNamesResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{24}
}

func (x *StepNamesResponse) GetSteps() []string {
	if x != nil {
		return x.Steps
	}
	return nil
}

// / Request runner to initialize Scenario DataStore
// / Scenario Datastore is reset after every Scenario execution.
type ScenarioDataStoreInitRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stream        int32                  `protobuf:"varint,1,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScenarioDataStoreInitRequest) Reset() {
	*x = ScenarioDataStoreInitRequest{}
	mi := &file_messages_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScenarioDataStoreInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioDataStoreInitRequest) ProtoMessage() {}

func (x *ScenarioDataStoreInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioDataStoreInitRequest.ProtoReflect.Descriptor instead.
func (*ScenarioDataStoreInitRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{25}
}

func (x *ScenarioDataStoreInitRequest) GetStream() int32 {
	if x != nil {
		return x.Stream
	}
	return 0
}

// / Request runner to initialize Spec DataStore
// / Spec Datastore is reset after every Spec execution.
type SpecDataStoreInitRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stream        int32                  `protobuf:"varint,1,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecDataStoreInitRequest) Reset() {
	*x = SpecDataStoreInitRequest{}
	mi := &file_messages_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecDataStoreInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecDataStoreInitRequest) ProtoMessage() {}

func (x *SpecDataStoreInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecDataStoreInitRequest.ProtoReflect.Descriptor instead.
func (*SpecDataStoreInitRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{26}
}

func (x *SpecDataStoreInitRequest) GetStream() int32 {
	if x != nil {
		return x.Stream
	}
	return 0
}

// / Request runner to initialize Suite DataStore
// / Suite Datastore is reset after every Suite execution.
type SuiteDataStoreInitRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stream        int32                  `protobuf:"varint,1,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SuiteDataStoreInitRequest) Reset() {
	*x = SuiteDataStoreInitRequest{}
	mi := &file_messages_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuiteDataStoreInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiteDataStoreInitRequest) ProtoMessage() {}

func (x *SuiteDataStoreInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiteDataStoreInitRequest.ProtoReflect.Descriptor instead.
func (*SuiteDataStoreInitRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{27}
}

func (x *SuiteDataStoreInitRequest) GetStream() int32 {
	if x != nil {
		return x.Stream
	}
	return 0
}

// / Holds the new and old positions of a parameter.
// / Used when refactoring a Step.
type ParameterPosition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OldPosition   int32                  `protobuf:"varint,1,opt,name=oldPosition,proto3" json:"oldPosition,omitempty"`
	NewPosition   int32                  `protobuf:"varint,2,opt,name=newPosition,proto3" json:"newPosition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParameterPosition) Reset() {
	*x = ParameterPosition{}
	mi := &file_messages_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterPosition) ProtoMessage() {}

func (x *ParameterPosition) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterPosition.ProtoReflect.Descriptor instead.
func (*ParameterPosition) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{28}
}

func (x *ParameterPosition) GetOldPosition() int32 {
	if x != nil {
		return x.OldPosition
	}
	return 0
}

func (x *ParameterPosition) GetNewPosition() int32 {
	if x != nil {
		return x.NewPosition
	}
	return 0
}

// / Tells the runner to refactor the specified Step.
type RefactorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Old value, used to lookup Step to refactor
	OldStepValue *ProtoStepValue `protobuf:"bytes,1,opt,name=oldStepValue,proto3" json:"oldStepValue,omitempty"`
	// / New value, the to-be value of Step being refactored.
	NewStepValue *ProtoStepValue `protobuf:"bytes,2,opt,name=newStepValue,proto3" json:"newStepValue,omitempty"`
	// / Holds parameter positions of all parameters. Contains old and new parameter positions.
	ParamPositions []*ParameterPosition `protobuf:"bytes,3,rep,name=paramPositions,proto3" json:"paramPositions,omitempty"`
	// / If set to true, the refactored files should be saved to the file system before returning the response.
	SaveChanges   bool `protobuf:"varint,4,opt,name=saveChanges,proto3" json:"saveChanges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefactorRequest) Reset() {
	*x = RefactorRequest{}
	mi := &file_messages_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefactorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefactorRequest) ProtoMessage() {}

func (x *RefactorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefactorRequest.ProtoReflect.Descriptor instead.
func (*RefactorRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{29}
}

func (x *RefactorRequest) GetOldStepValue() *ProtoStepValue {
	if x != nil {
		return x.OldStepValue
	}
	return nil
}

func (x *RefactorRequest) GetNewStepValue() *ProtoStepValue {
	if x != nil {
		return x.NewStepValue
	}
	return nil
}

func (x *RefactorRequest) GetParamPositions() []*ParameterPosition {
	if x != nil {
		return x.ParamPositions
	}
	return nil
}

func (x *RefactorRequest) GetSaveChanges() bool {
	if x != nil {
		return x.SaveChanges
	}
	return false
}

// / Give all file changes to be made to file system
type FileChanges struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	FileName string                 `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// Deprecated: Marked as deprecated in messages.proto.
	FileContent   string      `protobuf:"bytes,2,opt,name=fileContent,proto3" json:"fileContent,omitempty"`
	Diffs         []*TextDiff `protobuf:"bytes,3,rep,name=diffs,proto3" json:"diffs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileChanges) Reset() {
	*x = FileChanges{}
	mi := &file_messages_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChanges) ProtoMessage() {}

func (x *FileChanges) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChanges.ProtoReflect.Descriptor instead.
func (*FileChanges) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{30}
}

func (x *FileChanges) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

// Deprecated: Marked as deprecated in messages.proto.
func (x *FileChanges) GetFileContent() string {
	if x != nil {
		return x.FileContent
	}
	return ""
}

func (x *FileChanges) GetDiffs() []*TextDiff {
	if x != nil {
		return x.Diffs
	}
	return nil
}

// / Response of a RefactorRequest
type RefactorResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Flag indicating the success of Refactor operation.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// / Error message, valid only if Refactor wasn't successful
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// / List of files that were affected because of the refactoring.
	FilesChanged []string `protobuf:"bytes,3,rep,name=filesChanged,proto3" json:"filesChanged,omitempty"`
	// / List of file changes to be made to successfully achieve refactoring.
	FileChanges   []*FileChanges `protobuf:"bytes,4,rep,name=fileChanges,proto3" json:"fileChanges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefactorResponse) Reset() {
	*x = RefactorResponse{}
	mi := &file_messages_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefactorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefactorResponse) ProtoMessage() {}

func (x *RefactorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefactorResponse.ProtoReflect.Descriptor instead.
func (*RefactorResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{31}
}

func (x *RefactorResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RefactorResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RefactorResponse) GetFilesChanged() []string {
	if x != nil {
		return x.FilesChanged
	}
	return nil
}

func (x *RefactorResponse) GetFileChanges() []*FileChanges {
	if x != nil {
		return x.FileChanges
	}
	return nil
}

// / Request for details on a Single Step.
type StepNameRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Step text to lookup the Step.
	// / This is the parsed step value, i.e. with placeholders for parameters.
	StepValue     string `protobuf:"bytes,1,opt,name=stepValue,proto3" json:"stepValue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepNameRequest) Reset() {
	*x = StepNameRequest{}
	mi := &file_messages_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepNameRequest) ProtoMessage() {}

func (x *StepNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepNameRequest.ProtoReflect.Descriptor instead.
func (*StepNameRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{32}
}

func (x *StepNameRequest) GetStepValue() string {
	if x != nil {
		return x.StepValue
	}
	return ""
}

// / Response to StepNameRequest.
type StepNameResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Flag indicating if there is a match for the given Step Text.
	IsStepPresent bool `protobuf:"varint,1,opt,name=isStepPresent,proto3" json:"isStepPresent,omitempty"`
	// / The Step name of the given step.
	StepName []string `protobuf:"bytes,2,rep,name=stepName,proto3" json:"stepName,omitempty"`
	// / Flag indicating if the given Step is an alias.
	HasAlias bool `protobuf:"varint,3,opt,name=hasAlias,proto3" json:"hasAlias,omitempty"`
	// / File name in which the step implementation exists
	FileName string `protobuf:"bytes,4,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// / Range of step
	Span *Span `protobuf:"bytes,5,opt,name=span,proto3" json:"span,omitempty"`
	// / Flag indicating if the given Step defined in some external library and the source code can not be accessed.
	IsExternal    bool `protobuf:"varint,6,opt,name=isExternal,proto3" json:"isExternal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepNameResponse) Reset() {
	*x = StepNameResponse{}
	mi := &file_messages_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepNameResponse) ProtoMessage() {}

func (x *StepNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepNameResponse.ProtoReflect.Descriptor instead.
func (*StepNameResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{33}
}

func (x *StepNameResponse) GetIsStepPresent() bool {
	if x != nil {
		return x.IsStepPresent
	}
	return false
}

func (x *StepNameResponse) GetStepName() []string {
	if x != nil {
		return x.StepName
	}
	return nil
}

func (x *StepNameResponse) GetHasAlias() bool {
	if x != nil {
		return x.HasAlias
	}
	return false
}

func (x *StepNameResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *StepNameResponse) GetSpan() *Span {
	if x != nil {
		return x.Span
	}
	return nil
}

func (x *StepNameResponse) GetIsExternal() bool {
	if x != nil {
		return x.IsExternal
	}
	return false
}

// / Response when a unsupported message request is sent.
type UnsupportedMessageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnsupportedMessageResponse) Reset() {
	*x = UnsupportedMessageResponse{}
	mi := &file_messages_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsupportedMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsupportedMessageResponse) ProtoMessage() {}

func (x *UnsupportedMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsupportedMessageResponse.ProtoReflect.Descriptor instead.
func (*UnsupportedMessageResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{34}
}

func (x *UnsupportedMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// / Request for caching a file.
// / Gauge sends this request when running in LSP mode,
// / so runner can cache file contents present on the client(an editor).
type CacheFileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / File content of the file to be cached
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// / File path of the file to be cached
	FilePath string `protobuf:"bytes,2,opt,name=filePath,proto3" json:"filePath,omitempty"`
	// / Specifies if the file is closed
	IsClosed bool `protobuf:"varint,3,opt,name=isClosed,proto3" json:"isClosed,omitempty"`
	// / Specifies the status of the file
	Status        CacheFileRequest_FileStatus `protobuf:"varint,4,opt,name=status,proto3,enum=gauge.messages.CacheFileRequest_FileStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CacheFileRequest) Reset() {
	*x = CacheFileRequest{}
	mi := &file_messages_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CacheFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheFileRequest) ProtoMessage() {}

func (x *CacheFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheFileRequest.ProtoReflect.Descriptor instead.
func (*CacheFileRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{35}
}

func (x *CacheFileRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CacheFileRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *CacheFileRequest) GetIsClosed() bool {
	if x != nil {
		return x.IsClosed
	}
	return false
}

func (x *CacheFileRequest) GetStatus() CacheFileRequest_FileStatus {
	if x != nil {
		return x.Status
	}
	return CacheFileRequest_CHANGED
}

// / Request for find step positions
type StepPositionsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Get step positions for file path
	FilePath      string `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepPositionsRequest) Reset() {
	*x = StepPositionsRequest{}
	mi := &file_messages_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepPositionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepPositionsRequest) ProtoMessage() {}

func (x *StepPositionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepPositionsRequest.ProtoReflect.Descriptor instead.
func (*StepPositionsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{36}
}

func (x *StepPositionsRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

// / Response for find step positions
type StepPositionsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Step Position
	StepPositions []*StepPositionsResponse_StepPosition `protobuf:"bytes,1,rep,name=stepPositions,proto3" json:"stepPositions,omitempty"`
	// / Error message
	Error         string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepPositionsResponse) Reset() {
	*x = StepPositionsResponse{}
	mi := &file_messages_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepPositionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepPositionsResponse) ProtoMessage() {}

func (x *StepPositionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepPositionsResponse.ProtoReflect.Descriptor instead.
func (*StepPositionsResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{37}
}

func (x *StepPositionsResponse) GetStepPositions() []*StepPositionsResponse_StepPosition {
	if x != nil {
		return x.StepPositions
	}
	return nil
}

func (x *StepPositionsResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// / Request for getting Implementation file glob pattern
type ImplementationFileGlobPatternRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImplementationFileGlobPatternRequest) Reset() {
	*x = ImplementationFileGlobPatternRequest{}
	mi := &file_messages_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImplementationFileGlobPatternRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationFileGlobPatternRequest) ProtoMessage() {}

func (x *ImplementationFileGlobPatternRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationFileGlobPatternRequest.ProtoReflect.Descriptor instead.
func (*ImplementationFileGlobPatternRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{38}
}

// / Response for getting Implementation file glob pattern
type ImplementationFileGlobPatternResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / List of implementation file glob patterns
	GlobPatterns  []string `protobuf:"bytes,1,rep,name=globPatterns,proto3" json:"globPatterns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImplementationFileGlobPatternResponse) Reset() {
	*x = ImplementationFileGlobPatternResponse{}
	mi := &file_messages_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImplementationFileGlobPatternResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationFileGlobPatternResponse) ProtoMessage() {}

func (x *ImplementationFileGlobPatternResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationFileGlobPatternResponse.ProtoReflect.Descriptor instead.
func (*ImplementationFileGlobPatternResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{39}
}

func (x *ImplementationFileGlobPatternResponse) GetGlobPatterns() []string {
	if x != nil {
		return x.GlobPatterns
	}
	return nil
}

// / Request for getting Implementation file list
type ImplementationFileListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImplementationFileListRequest) Reset() {
	*x = ImplementationFileListRequest{}
	mi := &file_messages_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImplementationFileListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationFileListRequest) ProtoMessage() {}

func (x *ImplementationFileListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationFileListRequest.ProtoReflect.Descriptor instead.
func (*ImplementationFileListRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{40}
}

// / Response for getting Implementation file list
type ImplementationFileListResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / List of implementation files
	ImplementationFilePaths []string `protobuf:"bytes,1,rep,name=implementationFilePaths,proto3" json:"implementationFilePaths,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ImplementationFileListResponse) Reset() {
	*x = ImplementationFileListResponse{}
	mi := &file_messages_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImplementationFileListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationFileListResponse) ProtoMessage() {}

func (x *ImplementationFileListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationFileListResponse.ProtoReflect.Descriptor instead.
func (*ImplementationFileListResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{41}
}

func (x *ImplementationFileListResponse) GetImplementationFilePaths() []string {
	if x != nil {
		return x.ImplementationFilePaths
	}
	return nil
}

// / Request for injecting code snippet into implementation file
type StubImplementationCodeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Path of the file where the new stub implementation will be added
	ImplementationFilePath string `protobuf:"bytes,1,opt,name=implementationFilePath,proto3" json:"implementationFilePath,omitempty"`
	// / List of implementation codes to be appended to implementation file.
	Codes         []string `protobuf:"bytes,2,rep,name=codes,proto3" json:"codes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StubImplementationCodeRequest) Reset() {
	*x = StubImplementationCodeRequest{}
	mi := &file_messages_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StubImplementationCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StubImplementationCodeRequest) ProtoMessage() {}

func (x *StubImplementationCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StubImplementationCodeRequest.ProtoReflect.Descriptor instead.
func (*StubImplementationCodeRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{42}
}

func (x *StubImplementationCodeRequest) GetImplementationFilePath() string {
	if x != nil {
		return x.ImplementationFilePath
	}
	return ""
}

func (x *StubImplementationCodeRequest) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

// / A Single Replace Diff Element to be applied
type TextDiff struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Range of file to be replaced
	Span *Span `protobuf:"bytes,1,opt,name=span,proto3" json:"span,omitempty"`
	// / New content to replace the content in the span
	Content       string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextDiff) Reset() {
	*x = TextDiff{}
	mi := &file_messages_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextDiff) ProtoMessage() {}

func (x *TextDiff) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextDiff.ProtoReflect.Descriptor instead.
func (*TextDiff) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{43}
}

func (x *TextDiff) GetSpan() *Span {
	if x != nil {
		return x.Span
	}
	return nil
}

func (x *TextDiff) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// / Diffs to be applied to a file
type FileDiff struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / File Path where the new content needs to be put in
	FilePath string `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	// / The diffs which need to be applied to this file
	TextDiffs     []*TextDiff `protobuf:"bytes,2,rep,name=textDiffs,proto3" json:"textDiffs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileDiff) Reset() {
	*x = FileDiff{}
	mi := &file_messages_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDiff) ProtoMessage() {}

func (x *FileDiff) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDiff.ProtoReflect.Descriptor instead.
func (*FileDiff) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{44}
}

func (x *FileDiff) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileDiff) GetTextDiffs() []*TextDiff {
	if x != nil {
		return x.TextDiffs
	}
	return nil
}

// / Tell gauge to reset the kill timer, thus extending the life
type KeepAlive struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / ID of the plugin initiating this request
	PluginId      string `protobuf:"bytes,1,opt,name=pluginId,proto3" json:"pluginId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeepAlive) Reset() {
	*x = KeepAlive{}
	mi := &file_messages_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeepAlive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAlive) ProtoMessage() {}

func (x *KeepAlive) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAlive.ProtoReflect.Descriptor instead.
func (*KeepAlive) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{45}
}

func (x *KeepAlive) GetPluginId() string {
	if x != nil {
		return x.PluginId
	}
	return ""
}

type SpecDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Holds a collection of Spec details.
	Details       []*SpecDetails_SpecDetail `protobuf:"bytes,1,rep,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecDetails) Reset() {
	*x = SpecDetails{}
	mi := &file_messages_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecDetails) ProtoMessage() {}

func (x *SpecDetails) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecDetails.ProtoReflect.Descriptor instead.
func (*SpecDetails) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{46}
}

func (x *SpecDetails) GetDetails() []*SpecDetails_SpecDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

// Empty is a blank response, to be used when there is no return expected.
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_messages_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{47}
}

// / This is the message which gets transferred all the time
// / with proper message type set
// / One of the Request/Response fields will have value, depending on the MessageType set.
type Message struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	MessageType Message_MessageType    `protobuf:"varint,1,opt,name=messageType,proto3,enum=gauge.messages.Message_MessageType" json:"messageType,omitempty"`
	// / A unique id to represent this message. A response to the message should copy over this value.
	// / This is used to synchronize messages & responses
	MessageId int64 `protobuf:"varint,2,opt,name=messageId,proto3" json:"messageId,omitempty"`
	// / [ExecutionStartingRequest](#gauge.messages.ExecutionStartingRequest)
	ExecutionStartingRequest *ExecutionStartingRequest `protobuf:"bytes,3,opt,name=executionStartingRequest,proto3" json:"executionStartingRequest,omitempty"`
	// / [SpecExecutionStartingRequest](#gauge.messages.SpecExecutionStartingRequest)
	SpecExecutionStartingRequest *SpecExecutionStartingRequest `protobuf:"bytes,4,opt,name=specExecutionStartingRequest,proto3" json:"specExecutionStartingRequest,omitempty"`
	// / [SpecExecutionEndingRequest](#gauge.messages.SpecExecutionEndingRequest)
	SpecExecutionEndingRequest *SpecExecutionEndingRequest `protobuf:"bytes,5,opt,name=specExecutionEndingRequest,proto3" json:"specExecutionEndingRequest,omitempty"`
	// / [ScenarioExecutionStartingRequest](#gauge.messages.ScenarioExecutionStartingRequest)
	ScenarioExecutionStartingRequest *ScenarioExecutionStartingRequest `protobuf:"bytes,6,opt,name=scenarioExecutionStartingRequest,proto3" json:"scenarioExecutionStartingRequest,omitempty"`
	// / [ScenarioExecutionEndingRequest](#gauge.messages.ScenarioExecutionEndingRequest)
	ScenarioExecutionEndingRequest *ScenarioExecutionEndingRequest `protobuf:"bytes,7,opt,name=scenarioExecutionEndingRequest,proto3" json:"scenarioExecutionEndingRequest,omitempty"`
	// / [StepExecutionStartingRequest](#gauge.messages.StepExecutionStartingRequest)
	StepExecutionStartingRequest *StepExecutionStartingRequest `protobuf:"bytes,8,opt,name=stepExecutionStartingRequest,proto3" json:"stepExecutionStartingRequest,omitempty"`
	// / [StepExecutionEndingRequest](#gauge.messages.StepExecutionEndingRequest)
	StepExecutionEndingRequest *StepExecutionEndingRequest `protobuf:"bytes,9,opt,name=stepExecutionEndingRequest,proto3" json:"stepExecutionEndingRequest,omitempty"`
	// / [ExecuteStepRequest](#gauge.messages.ExecuteStepRequest)
	ExecuteStepRequest *ExecuteStepRequest `protobuf:"bytes,10,opt,name=executeStepRequest,proto3" json:"executeStepRequest,omitempty"`
	// / [ExecutionEndingRequest](#gauge.messages.ExecutionEndingRequest)
	ExecutionEndingRequest *ExecutionEndingRequest `protobuf:"bytes,11,opt,name=executionEndingRequest,proto3" json:"executionEndingRequest,omitempty"`
	// / [StepValidateRequest](#gauge.messages.StepValidateRequest)
	StepValidateRequest *StepValidateRequest `protobuf:"bytes,12,opt,name=stepValidateRequest,proto3" json:"stepValidateRequest,omitempty"`
	// / [StepValidateResponse](#gauge.messages.StepValidateResponse)
	StepValidateResponse *StepValidateResponse `protobuf:"bytes,13,opt,name=stepValidateResponse,proto3" json:"stepValidateResponse,omitempty"`
	// / [ExecutionStatusResponse](#gauge.messages.ExecutionStatusResponse)
	ExecutionStatusResponse *ExecutionStatusResponse `protobuf:"bytes,14,opt,name=executionStatusResponse,proto3" json:"executionStatusResponse,omitempty"`
	// / [StepNamesRequest](#gauge.messages.StepNamesRequest)
	StepNamesRequest *StepNamesRequest `protobuf:"bytes,15,opt,name=stepNamesRequest,proto3" json:"stepNamesRequest,omitempty"`
	// / [StepNamesResponse](#gauge.messages.StepNamesResponse)
	StepNamesResponse *StepNamesResponse `protobuf:"bytes,16,opt,name=stepNamesResponse,proto3" json:"stepNamesResponse,omitempty"`
	// / [SuiteExecutionResult ](#gauge.messages.SuiteExecutionResult )
	SuiteExecutionResult *SuiteExecutionResult `protobuf:"bytes,17,opt,name=suiteExecutionResult,proto3" json:"suiteExecutionResult,omitempty"`
	// / [KillProcessRequest](#gauge.messages.KillProcessRequest)
	KillProcessRequest *KillProcessRequest `protobuf:"bytes,18,opt,name=killProcessRequest,proto3" json:"killProcessRequest,omitempty"`
	// / [ScenarioDataStoreInitRequest](#gauge.messages.ScenarioDataStoreInitRequest)
	ScenarioDataStoreInitRequest *ScenarioDataStoreInitRequest `protobuf:"bytes,19,opt,name=scenarioDataStoreInitRequest,proto3" json:"scenarioDataStoreInitRequest,omitempty"`
	// / [SpecDataStoreInitRequest](#gauge.messages.SpecDataStoreInitRequest)
	SpecDataStoreInitRequest *SpecDataStoreInitRequest `protobuf:"bytes,20,opt,name=specDataStoreInitRequest,proto3" json:"specDataStoreInitRequest,omitempty"`
	// / [SuiteDataStoreInitRequest](#gauge.messages.SuiteDataStoreInitRequest)
	SuiteDataStoreInitRequest *SuiteDataStoreInitRequest `protobuf:"bytes,21,opt,name=suiteDataStoreInitRequest,proto3" json:"suiteDataStoreInitRequest,omitempty"`
	// / [StepNameRequest](#gauge.messages.StepNameRequest)
	StepNameRequest *StepNameRequest `protobuf:"bytes,22,opt,name=stepNameRequest,proto3" json:"stepNameRequest,omitempty"`
	// / [StepNameResponse](#gauge.messages.StepNameResponse)
	StepNameResponse *StepNameResponse `protobuf:"bytes,23,opt,name=stepNameResponse,proto3" json:"stepNameResponse,omitempty"`
	// / [RefactorRequest](#gauge.messages.RefactorRequest)
	RefactorRequest *RefactorRequest `protobuf:"bytes,24,opt,name=refactorRequest,proto3" json:"refactorRequest,omitempty"`
	// / [RefactorResponse](#gauge.messages.RefactorResponse)
	RefactorResponse *RefactorResponse `protobuf:"bytes,25,opt,name=refactorResponse,proto3" json:"refactorResponse,omitempty"`
	// / [UnsupportedMessageResponse](#gauge.messages.UnsupportedMessageResponse)
	UnsupportedMessageResponse *UnsupportedMessageResponse `protobuf:"bytes,26,opt,name=unsupportedMessageResponse,proto3" json:"unsupportedMessageResponse,omitempty"`
	// / [CacheFileRequest](#gauge.messages.CacheFileRequest)
	CacheFileRequest *CacheFileRequest `protobuf:"bytes,27,opt,name=cacheFileRequest,proto3" json:"cacheFileRequest,omitempty"`
	// / [StepPositionsRequest](#gauge.messages.StepPositionsRequest)
	StepPositionsRequest *StepPositionsRequest `protobuf:"bytes,28,opt,name=stepPositionsRequest,proto3" json:"stepPositionsRequest,omitempty"`
	// / [StepPositionsResponse](#gauge.messages.StepPositionsResponse)
	StepPositionsResponse *StepPositionsResponse `protobuf:"bytes,29,opt,name=stepPositionsResponse,proto3" json:"stepPositionsResponse,omitempty"`
	// / [ImplementationFileListRequest](#gauge.messages.ImplementationFileListRequest)
	ImplementationFileListRequest *ImplementationFileListRequest `protobuf:"bytes,30,opt,name=implementationFileListRequest,proto3" json:"implementationFileListRequest,omitempty"`
	// / [ImplementationFileListResponse](#gauge.messages.ImplementationFileListResponse)
	ImplementationFileListResponse *ImplementationFileListResponse `protobuf:"bytes,31,opt,name=implementationFileListResponse,proto3" json:"implementationFileListResponse,omitempty"`
	// / [StubImplementationCodeRequest](#gauge.messages.StubImplementationCodeRequest)
	StubImplementationCodeRequest *StubImplementationCodeRequest `protobuf:"bytes,32,opt,name=stubImplementationCodeRequest,proto3" json:"stubImplementationCodeRequest,omitempty"`
	// / [FileDiff](#gauge.messages.FileDiff)
	FileDiff *FileDiff `protobuf:"bytes,33,opt,name=fileDiff,proto3" json:"fileDiff,omitempty"`
	// / [ImplementationFileGlobPatternRequest](#gauge.messages.ImplementationFileGlobPatternRequest)
	ImplementationFileGlobPatternRequest *ImplementationFileGlobPatternRequest `protobuf:"bytes,34,opt,name=implementationFileGlobPatternRequest,proto3" json:"implementationFileGlobPatternRequest,omitempty"`
	// / [ImplementationFileGlobPatternResponse](#gauge.messages.ImplementationFileGlobPatternResponse)
	ImplementationFileGlobPatternResponse *ImplementationFileGlobPatternResponse `protobuf:"bytes,35,opt,name=implementationFileGlobPatternResponse,proto3" json:"implementationFileGlobPatternResponse,omitempty"`
	// / [SuiteExecutionResult ](#gauge.messages.SuiteExecutionResult )
	SuiteExecutionResultItem *SuiteExecutionResultItem `protobuf:"bytes,36,opt,name=suiteExecutionResultItem,proto3" json:"suiteExecutionResultItem,omitempty"`
	// / [KeepAlive ](#gauge.messages.KeepAlive )
	KeepAlive *KeepAlive `protobuf:"bytes,37,opt,name=keepAlive,proto3" json:"keepAlive,omitempty"`
	// / [ConceptExecutionStartingRequest](#gauge.messages.ConceptExecutionStartingRequest)
	ConceptExecutionStartingRequest *ConceptExecutionStartingRequest `protobuf:"bytes,38,opt,name=conceptExecutionStartingRequest,proto3" json:"conceptExecutionStartingRequest,omitempty"`
	// / [ConceptExecutionEndingRequest](#gauge.messages.ConceptExecutionEndingRequest)
	ConceptExecutionEndingRequest *ConceptExecutionEndingRequest `protobuf:"bytes,39,opt,name=conceptExecutionEndingRequest,proto3" json:"conceptExecutionEndingRequest,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_messages_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{48}
}

func (x *Message) GetMessageType() Message_MessageType {
	if x != nil {
		return x.MessageType
	}
	return Message_ExecutionStarting
}

func (x *Message) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *Message) GetExecutionStartingRequest() *ExecutionStartingRequest {
	if x != nil {
		return x.ExecutionStartingRequest
	}
	return nil
}

func (x *Message) GetSpecExecutionStartingRequest() *SpecExecutionStartingRequest {
	if x != nil {
		return x.SpecExecutionStartingRequest
	}
	return nil
}

func (x *Message) GetSpecExecutionEndingRequest() *SpecExecutionEndingRequest {
	if x != nil {
		return x.SpecExecutionEndingRequest
	}
	return nil
}

func (x *Message) GetScenarioExecutionStartingRequest() *ScenarioExecutionStartingRequest {
	if x != nil {
		return x.ScenarioExecutionStartingRequest
	}
	return nil
}

func (x *Message) GetScenarioExecutionEndingRequest() *ScenarioExecutionEndingRequest {
	if x != nil {
		return x.ScenarioExecutionEndingRequest
	}
	return nil
}

func (x *Message) GetStepExecutionStartingRequest() *StepExecutionStartingRequest {
	if x != nil {
		return x.StepExecutionStartingRequest
	}
	return nil
}

func (x *Message) GetStepExecutionEndingRequest() *StepExecutionEndingRequest {
	if x != nil {
		return x.StepExecutionEndingRequest
	}
	return nil
}

func (x *Message) GetExecuteStepRequest() *ExecuteStepRequest {
	if x != nil {
		return x.ExecuteStepRequest
	}
	return nil
}

func (x *Message) GetExecutionEndingRequest() *ExecutionEndingRequest {
	if x != nil {
		return x.ExecutionEndingRequest
	}
	return nil
}

func (x *Message) GetStepValidateRequest() *StepValidateRequest {
	if x != nil {
		return x.StepValidateRequest
	}
	return nil
}

func (x *Message) GetStepValidateResponse() *StepValidateResponse {
	if x != nil {
		return x.StepValidateResponse
	}
	return nil
}

func (x *Message) GetExecutionStatusResponse() *ExecutionStatusResponse {
	if x != nil {
		return x.ExecutionStatusResponse
	}
	return nil
}

func (x *Message) GetStepNamesRequest() *StepNamesRequest {
	if x != nil {
		return x.StepNamesRequest
	}
	return nil
}

func (x *Message) GetStepNamesResponse() *StepNamesResponse {
	if x != nil {
		return x.StepNamesResponse
	}
	return nil
}

func (x *Message) GetSuiteExecutionResult() *SuiteExecutionResult {
	if x != nil {
		return x.SuiteExecutionResult
	}
	return nil
}

func (x *Message) GetKillProcessRequest() *KillProcessRequest {
	if x != nil {
		return x.KillProcessRequest
	}
	return nil
}

func (x *Message) GetScenarioDataStoreInitRequest() *ScenarioDataStoreInitRequest {
	if x != nil {
		return x.ScenarioDataStoreInitRequest
	}
	return nil
}

func (x *Message) GetSpecDataStoreInitRequest() *SpecDataStoreInitRequest {
	if x != nil {
		return x.SpecDataStoreInitRequest
	}
	return nil
}

func (x *Message) GetSuiteDataStoreInitRequest() *SuiteDataStoreInitRequest {
	if x != nil {
		return x.SuiteDataStoreInitRequest
	}
	return nil
}

func (x *Message) GetStepNameRequest() *StepNameRequest {
	if x != nil {
		return x.StepNameRequest
	}
	return nil
}

func (x *Message) GetStepNameResponse() *StepNameResponse {
	if x != nil {
		return x.StepNameResponse
	}
	return nil
}

func (x *Message) GetRefactorRequest() *RefactorRequest {
	if x != nil {
		return x.RefactorRequest
	}
	return nil
}

func (x *Message) GetRefactorResponse() *RefactorResponse {
	if x != nil {
		return x.RefactorResponse
	}
	return nil
}

func (x *Message) GetUnsupportedMessageResponse() *UnsupportedMessageResponse {
	if x != nil {
		return x.UnsupportedMessageResponse
	}
	return nil
}

func (x *Message) GetCacheFileRequest() *CacheFileRequest {
	if x != nil {
		return x.CacheFileRequest
	}
	return nil
}

func (x *Message) GetStepPositionsRequest() *StepPositionsRequest {
	if x != nil {
		return x.StepPositionsRequest
	}
	return nil
}

func (x *Message) GetStepPositionsResponse() *StepPositionsResponse {
	if x != nil {
		return x.StepPositionsResponse
	}
	return nil
}

func (x *Message) GetImplementationFileListRequest() *ImplementationFileListRequest {
	if x != nil {
		return x.ImplementationFileListRequest
	}
	return nil
}

func (x *Message) GetImplementationFileListResponse() *ImplementationFileListResponse {
	if x != nil {
		return x.ImplementationFileListResponse
	}
	return nil
}

func (x *Message) GetStubImplementationCodeRequest() *StubImplementationCodeRequest {
	if x != nil {
		return x.StubImplementationCodeRequest
	}
	return nil
}

func (x *Message) GetFileDiff() *FileDiff {
	if x != nil {
		return x.FileDiff
	}
	return nil
}

func (x *Message) GetImplementationFileGlobPatternRequest() *ImplementationFileGlobPatternRequest {
	if x != nil {
		return x.ImplementationFileGlobPatternRequest
	}
	return nil
}

func (x *Message) GetImplementationFileGlobPatternResponse() *ImplementationFileGlobPatternResponse {
	if x != nil {
		return x.ImplementationFileGlobPatternResponse
	}
	return nil
}

func (x *Message) GetSuiteExecutionResultItem() *SuiteExecutionResultItem {
	if x != nil {
		return x.SuiteExecutionResultItem
	}
	return nil
}

func (x *Message) GetKeepAlive() *KeepAlive {
	if x != nil {
		return x.KeepAlive
	}
	return nil
}

func (x *Message) GetConceptExecutionStartingRequest() *ConceptExecutionStartingRequest {
	if x != nil {
		return x.ConceptExecutionStartingRequest
	}
	return nil
}

func (x *Message) GetConceptExecutionEndingRequest() *ConceptExecutionEndingRequest {
	if x != nil {
		return x.ConceptExecutionEndingRequest
	}
	return nil
}

// / Step position for each step implementation
type StepPositionsResponse_StepPosition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Step Value
	StepValue string `protobuf:"bytes,1,opt,name=stepValue,proto3" json:"stepValue,omitempty"`
	// / Range of step
	Span          *Span `protobuf:"bytes,2,opt,name=span,proto3" json:"span,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepPositionsResponse_StepPosition) Reset() {
	*x = StepPositionsResponse_StepPosition{}
	mi := &file_messages_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepPositionsResponse_StepPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepPositionsResponse_StepPosition) ProtoMessage() {}

func (x *StepPositionsResponse_StepPosition) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepPositionsResponse_StepPosition.ProtoReflect.Descriptor instead.
func (*StepPositionsResponse_StepPosition) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{37, 0}
}

func (x *StepPositionsResponse_StepPosition) GetStepValue() string {
	if x != nil {
		return x.StepValue
	}
	return ""
}

func (x *StepPositionsResponse_StepPosition) GetSpan() *Span {
	if x != nil {
		return x.Span
	}
	return nil
}

type SpecDetails_SpecDetail struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Holds a collection of Specs that are defined in the project.
	Spec *ProtoSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	// / Holds a collection of parse errors present in the above spec.
	ParseErrors   []*Error `protobuf:"bytes,2,rep,name=parseErrors,proto3" json:"parseErrors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecDetails_SpecDetail) Reset() {
	*x = SpecDetails_SpecDetail{}
	mi := &file_messages_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecDetails_SpecDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecDetails_SpecDetail) ProtoMessage() {}

func (x *SpecDetails_SpecDetail) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecDetails_SpecDetail.ProtoReflect.Descriptor instead.
func (*SpecDetails_SpecDetail) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{46, 0}
}

func (x *SpecDetails_SpecDetail) GetSpec() *ProtoSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *SpecDetails_SpecDetail) GetParseErrors() []*Error {
	if x != nil {
		return x.ParseErrors
	}
	return nil
}

var File_messages_proto protoreflect.FileDescriptor

const file_messages_proto_rawDesc = "" +
	"\n" +
	"\x0emessages.proto\x12\x0egauge.messages\x1a\n" +
	"spec.proto\"\x14\n" +
	"\x12KillProcessRequest\"i\n" +
	"\x17ExecutionStatusResponse\x12N\n" +
	"\x0fexecutionResult\x18\x01 \x01(\v2$.gauge.messages.ProtoExecutionResultR\x0fexecutionResult\"\xc9\x01\n" +
	"\x18ExecutionStartingRequest\x12Q\n" +
	"\x14currentExecutionInfo\x18\x01 \x01(\v2\x1d.gauge.messages.ExecutionInfoR\x14currentExecutionInfo\x12B\n" +
	"\vsuiteResult\x18\x02 \x01(\v2 .gauge.messages.ProtoSuiteResultR\vsuiteResult\x12\x16\n" +
	"\x06stream\x18\x03 \x01(\x05R\x06stream\"\xc7\x01\n" +
	"\x16ExecutionEndingRequest\x12Q\n" +
	"\x14currentExecutionInfo\x18\x01 \x01(\v2\x1d.gauge.messages.ExecutionInfoR\x14currentExecutionInfo\x12B\n" +
	"\vsuiteResult\x18\x02 \x01(\v2 .gauge.messages.ProtoSuiteResultR\vsuiteResult\x12\x16\n" +
	"\x06stream\x18\x03 \x01(\x05R\x06stream\"\xca\x01\n" +
	"\x1cSpecExecutionStartingRequest\x12Q\n" +
	"\x14currentExecutionInfo\x18\x01 \x01(\v2\x1d.gauge.messages.ExecutionInfoR\x14currentExecutionInfo\x12?\n" +
	"\n" +
	"specResult\x18\x02 \x01(\v2\x1f.gauge.messages.ProtoSpecResultR\n" +
	"specResult\x12\x16\n" +
	"\x06stream\x18\x03 \x01(\x05R\x06stream\"\xc8\x01\n" +
	"\x1aSpecExecutionEndingRequest\x12Q\n" +
	"\x14currentExecutionInfo\x18\x01 \x01(\v2\x1d.gauge.messages.ExecutionInfoR\x14currentExecutionInfo\x12?\n" +
	"\n" +
	"specResult\x18\x02 \x01(\v2\x1f.gauge.messages.ProtoSpecResultR\n" +
	"specResult\x12\x16\n" +
	"\x06stream\x18\x03 \x01(\x05R\x06stream\"\xda\x01\n" +
	" ScenarioExecutionStartingRequest\x12Q\n" +
	"\x14currentExecutionInfo\x18\x01 \x01(\v2\x1d.gauge.messages.ExecutionInfoR\x14currentExecutionInfo\x12K\n" +
	"\x0escenarioResult\x18\x02 \x01(\v2#.gauge.messages.ProtoScenarioResultR\x0escenarioResult\x12\x16\n" +
	"\x06stream\x18\x03 \x01(\x05R\x06stream\"\xd8\x01\n" +
	"\x1eScenarioExecutionEndingRequest\x12Q\n" +
	"\x14currentExecutionInfo\x18\x01 \x01(\v2\x1d.gauge.messages.ExecutionInfoR\x14currentExecutionInfo\x12K\n" +
	"\x0escenarioResult\x18\x02 \x01(\v2#.gauge.messages.ProtoScenarioResultR\x0escenarioResult\x12\x16\n" +
	"\x06stream\x18\x03 \x01(\x05R\x06stream\"\xca\x01\n" +
	"\x1cStepExecutionStartingRequest\x12Q\n" +
	"\x14currentExecutionInfo\x18\x01 \x01(\v2\x1d.gauge.messages.ExecutionInfoR\x14currentExecutionInfo\x12?\n" +
	"\n" +
	"stepResult\x18\x02 \x01(\v2\x1f.gauge.messages.ProtoStepResultR\n" +
	"stepResult\x12\x16\n" +
	"\x06stream\x18\x03 \x01(\x05R\x06stream\"\xc8\x01\n" +
	"\x1aStepExecutionEndingRequest\x12Q\n" +
	"\x14currentExecutionInfo\x18\x01 \x01(\v2\x1d.gauge.messages.ExecutionInfoR\x14currentExecutionInfo\x12?\n" +
	"\n" +
	"stepResult\x18\x02 \x01(\v2\x1f.gauge.messages.ProtoStepResultR\n" +
	"stepResult\x12\x16\n" +
	"\x06stream\x18\x03 \x01(\x05R\x06stream\"\xcd\x01\n" +
	"\x1fConceptExecutionStartingRequest\x12Q\n" +
	"\x14currentExecutionInfo\x18\x01 \x01(\v2\x1d.gauge.messages.ExecutionInfoR\x14currentExecutionInfo\x12?\n" +
	"\n" +
	"stepResult\x18\x02 \x01(\v2\x1f.gauge.messages.ProtoStepResultR\n" +
	"stepResult\x12\x16\n" +
	"\x06stream\x18\x03 \x01(\x05R\x06stream\"\xcb\x01\n" +
	"\x1dConceptExecutionEndingRequest\x12Q\n" +
	"\x14currentExecutionInfo\x18\x01 \x01(\v2\x1d.gauge.messages.ExecutionInfoR\x14currentExecutionInfo\x12?\n" +
	"\n" +
	"stepResult\x18\x02 \x01(\v2\x1f.gauge.messages.ProtoStepResultR\n" +
	"stepResult\x12\x16\n" +
	"\x06stream\x18\x03 \x01(\x05R\x06stream\"H\n" +
	"\fExecutionArg\x12\x1a\n" +
	"\bflagName\x18\x01 \x01(\tR\bflagName\x12\x1c\n" +
	"\tflagValue\x18\x02 \x03(\tR\tflagValue\"\xad\x03\n" +
	"\rExecutionInfo\x12:\n" +
	"\vcurrentSpec\x18\x01 \x01(\v2\x18.gauge.messages.SpecInfoR\vcurrentSpec\x12F\n" +
	"\x0fcurrentScenario\x18\x02 \x01(\v2\x1c.gauge.messages.ScenarioInfoR\x0fcurrentScenario\x12:\n" +
	"\vcurrentStep\x18\x03 \x01(\v2\x18.gauge.messages.StepInfoR\vcurrentStep\x12\x1e\n" +
	"\n" +
	"stacktrace\x18\x04 \x01(\tR\n" +
	"stacktrace\x12 \n" +
	"\vprojectName\x18\x05 \x01(\tR\vprojectName\x12B\n" +
	"\rExecutionArgs\x18\x06 \x03(\v2\x1c.gauge.messages.ExecutionArgR\rExecutionArgs\x12:\n" +
	"\x18numberOfExecutionStreams\x18\a \x01(\x05R\x18numberOfExecutionStreams\x12\x1a\n" +
	"\brunnerId\x18\b \x01(\x05R\brunnerId\"j\n" +
	"\bSpecInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\bfileName\x18\x02 \x01(\tR\bfileName\x12\x1a\n" +
	"\bisFailed\x18\x03 \x01(\bR\bisFailed\x12\x12\n" +
	"\x04tags\x18\x04 \x03(\tR\x04tags\"\x91\x01\n" +
	"\fScenarioInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\bisFailed\x18\x02 \x01(\bR\bisFailed\x12\x12\n" +
	"\x04tags\x18\x03 \x03(\tR\x04tags\x12=\n" +
	"\aretries\x18\x04 \x01(\v2#.gauge.messages.ScenarioRetriesInfoR\aretries\"Y\n" +
	"\x13ScenarioRetriesInfo\x12\x1e\n" +
	"\n" +
	"maxRetries\x18\x01 \x01(\x05R\n" +
	"maxRetries\x12\"\n" +
	"\fcurrentRetry\x18\x02 \x01(\x05R\fcurrentRetry\"\xa2\x01\n" +
	"\bStepInfo\x126\n" +
	"\x04step\x18\x01 \x01(\v2\".gauge.messages.ExecuteStepRequestR\x04step\x12\x1a\n" +
	"\bisFailed\x18\x02 \x01(\bR\bisFailed\x12\x1e\n" +
	"\n" +
	"stackTrace\x18\x03 \x01(\tR\n" +
	"stackTrace\x12\"\n" +
	"\ferrorMessage\x18\x04 \x01(\tR\ferrorMessage\"\xe1\x01\n" +
	"\x12ExecuteStepRequest\x12&\n" +
	"\x0eactualStepText\x18\x01 \x01(\tR\x0eactualStepText\x12&\n" +
	"\x0eparsedStepText\x18\x02 \x01(\tR\x0eparsedStepText\x12(\n" +
	"\x0fscenarioFailing\x18\x03 \x01(\bR\x0fscenarioFailing\x129\n" +
	"\n" +
	"parameters\x18\x04 \x03(\v2\x19.gauge.messages.ParameterR\n" +
	"parameters\x12\x16\n" +
	"\x06stream\x18\x05 \x01(\x05R\x06stream\"\x9f\x01\n" +
	"\x13StepValidateRequest\x12\x1a\n" +
	"\bstepText\x18\x01 \x01(\tR\bstepText\x12.\n" +
	"\x12numberOfParameters\x18\x02 \x01(\x05R\x12numberOfParameters\x12<\n" +
	"\tstepValue\x18\x03 \x01(\v2\x1e.gauge.messages.ProtoStepValueR\tstepValue\"\x95\x02\n" +
	"\x14StepValidateResponse\x12\x18\n" +
	"\aisValid\x18\x01 \x01(\bR\aisValid\x12\"\n" +
	"\ferrorMessage\x18\x02 \x01(\tR\ferrorMessage\x12L\n" +
	"\terrorType\x18\x03 \x01(\x0e2..gauge.messages.StepValidateResponse.ErrorTypeR\terrorType\x12\x1e\n" +
	"\n" +
	"suggestion\x18\x04 \x01(\tR\n" +
	"suggestion\"Q\n" +
	"\tErrorType\x12!\n" +
	"\x1dSTEP_IMPLEMENTATION_NOT_FOUND\x10\x00\x12!\n" +
	"\x1dDUPLICATE_STEP_IMPLEMENTATION\x10\x01\"Z\n" +
	"\x14SuiteExecutionResult\x12B\n" +
	"\vsuiteResult\x18\x01 \x01(\v2 .gauge.messages.ProtoSuiteResultR\vsuiteResult\"U\n" +
	"\x18SuiteExecutionResultItem\x129\n" +
	"\n" +
	"resultItem\x18\x01 \x01(\v2\x19.gauge.messages.ProtoItemR\n" +
	"resultItem\"\x12\n" +
	"\x10StepNamesRequest\")\n" +
	"\x11StepNamesResponse\x12\x14\n" +
	"\x05steps\x18\x01 \x03(\tR\x05steps\"6\n" +
	"\x1cScenarioDataStoreInitRequest\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\x05R\x06stream\"2\n" +
	"\x18SpecDataStoreInitRequest\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\x05R\x06stream\"3\n" +
	"\x19SuiteDataStoreInitRequest\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\x05R\x06stream\"W\n" +
	"\x11ParameterPosition\x12 \n" +
	"\voldPosition\x18\x01 \x01(\x05R\voldPosition\x12 \n" +
	"\vnewPosition\x18\x02 \x01(\x05R\vnewPosition\"\x86\x02\n" +
	"\x0fRefactorRequest\x12B\n" +
	"\foldStepValue\x18\x01 \x01(\v2\x1e.gauge.messages.ProtoStepValueR\foldStepValue\x12B\n" +
	"\fnewStepValue\x18\x02 \x01(\v2\x1e.gauge.messages.ProtoStepValueR\fnewStepValue\x12I\n" +
	"\x0eparamPositions\x18\x03 \x03(\v2!.gauge.messages.ParameterPositionR\x0eparamPositions\x12 \n" +
	"\vsaveChanges\x18\x04 \x01(\bR\vsaveChanges\"\x7f\n" +
	"\vFileChanges\x12\x1a\n" +
	"\bfileName\x18\x01 \x01(\tR\bfileName\x12$\n" +
	"\vfileContent\x18\x02 \x01(\tB\x02\x18\x01R\vfileContent\x12.\n" +
	"\x05diffs\x18\x03 \x03(\v2\x18.gauge.messages.TextDiffR\x05diffs\"\xa5\x01\n" +
	"\x10RefactorResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12\"\n" +
	"\ffilesChanged\x18\x03 \x03(\tR\ffilesChanged\x12=\n" +
	"\vfileChanges\x18\x04 \x03(\v2\x1b.gauge.messages.FileChangesR\vfileChanges\"/\n" +
	"\x0fStepNameRequest\x12\x1c\n" +
	"\tstepValue\x18\x01 \x01(\tR\tstepValue\"\xd6\x01\n" +
	"\x10StepNameResponse\x12$\n" +
	"\risStepPresent\x18\x01 \x01(\bR\risStepPresent\x12\x1a\n" +
	"\bstepName\x18\x02 \x03(\tR\bstepName\x12\x1a\n" +
	"\bhasAlias\x18\x03 \x01(\bR\bhasAlias\x12\x1a\n" +
	"\bfileName\x18\x04 \x01(\tR\bfileName\x12(\n" +
	"\x04span\x18\x05 \x01(\v2\x14.gauge.messages.SpanR\x04span\x12\x1e\n" +
	"\n" +
	"isExternal\x18\x06 \x01(\bR\n" +
	"isExternal\"6\n" +
	"\x1aUnsupportedMessageResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"\xf6\x01\n" +
	"\x10CacheFileRequest\x12\x18\n" +
	"\acontent\x18\x01 \x01(\tR\acontent\x12\x1a\n" +
	"\bfilePath\x18\x02 \x01(\tR\bfilePath\x12\x1a\n" +
	"\bisClosed\x18\x03 \x01(\bR\bisClosed\x12C\n" +
	"\x06status\x18\x04 \x01(\x0e2+.gauge.messages.CacheFileRequest.FileStatusR\x06status\"K\n" +
	"\n" +
	"FileStatus\x12\v\n" +
	"\aCHANGED\x10\x00\x12\n" +
	"\n" +
	"\x06CLOSED\x10\x01\x12\v\n" +
	"\aCREATED\x10\x02\x12\v\n" +
	"\aDELETED\x10\x03\x12\n" +
	"\n" +
	"\x06OPENED\x10\x04\"2\n" +
	"\x14StepPositionsRequest\x12\x1a\n" +
	"\bfilePath\x18\x01 \x01(\tR\bfilePath\"\xdf\x01\n" +
	"\x15StepPositionsResponse\x12X\n" +
	"\rstepPositions\x18\x01 \x03(\v22.gauge.messages.StepPositionsResponse.StepPositionR\rstepPositions\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x1aV\n" +
	"\fStepPosition\x12\x1c\n" +
	"\tstepValue\x18\x01 \x01(\tR\tstepValue\x12(\n" +
	"\x04span\x18\x02 \x01(\v2\x14.gauge.messages.SpanR\x04span\"&\n" +
	"$ImplementationFileGlobPatternRequest\"K\n" +
	"%ImplementationFileGlobPatternResponse\x12\"\n" +
	"\fglobPatterns\x18\x01 \x03(\tR\fglobPatterns\"\x1f\n" +
	"\x1dImplementationFileListRequest\"Z\n" +
	"\x1eImplementationFileListResponse\x128\n" +
	"\x17implementationFilePaths\x18\x01 \x03(\tR\x17implementationFilePaths\"m\n" +
	"\x1dStubImplementationCodeRequest\x126\n" +
	"\x16implementationFilePath\x18\x01 \x01(\tR\x16implementationFilePath\x12\x14\n" +
	"\x05codes\x18\x02 \x03(\tR\x05codes\"N\n" +
	"\bTextDiff\x12(\n" +
	"\x04span\x18\x01 \x01(\v2\x14.gauge.messages.SpanR\x04span\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\"^\n" +
	"\bFileDiff\x12\x1a\n" +
	"\bfilePath\x18\x01 \x01(\tR\bfilePath\x126\n" +
	"\ttextDiffs\x18\x02 \x03(\v2\x18.gauge.messages.TextDiffR\ttextDiffs\"'\n" +
	"\tKeepAlive\x12\x1a\n" +
	"\bpluginId\x18\x01 \x01(\tR\bpluginId\"\xc5\x01\n" +
	"\vSpecDetails\x12@\n" +
	"\adetails\x18\x01 \x03(\v2&.gauge.messages.SpecDetails.SpecDetailR\adetails\x1at\n" +
	"\n" +
	"SpecDetail\x12-\n" +
	"\x04spec\x18\x01 \x01(\v2\x19.gauge.messages.ProtoSpecR\x04spec\x127\n" +
	"\vparseErrors\x18\x02 \x03(\v2\x15.gauge.messages.ErrorR\vparseErrors\"\a\n" +
	"\x05Empty\"\x9e%\n" +
	"\aMessage\x12E\n" +
	"\vmessageType\x18\x01 \x01(\x0e2#.gauge.messages.Message.MessageTypeR\vmessageType\x12\x1c\n" +
	"\tmessageId\x18\x02 \x01(\x03R\tmessageId\x12d\n" +
	"\x18executionStartingRequest\x18\x03 \x01(\v2(.gauge.messages.ExecutionStartingRequestR\x18executionStartingRequest\x12p\n" +
	"\x1cspecExecutionStartingRequest\x18\x04 \x01(\v2,.gauge.messages.SpecExecutionStartingRequestR\x1cspecExecutionStartingRequest\x12j\n" +
	"\x1aspecExecutionEndingRequest\x18\x05 \x01(\v2*.gauge.messages.SpecExecutionEndingRequestR\x1aspecExecutionEndingRequest\x12|\n" +
	" scenarioExecutionStartingRequest\x18\x06 \x01(\v20.gauge.messages.ScenarioExecutionStartingRequestR scenarioExecutionStartingRequest\x12v\n" +
	"\x1escenarioExecutionEndingRequest\x18\a \x01(\v2..gauge.messages.ScenarioExecutionEndingRequestR\x1escenarioExecutionEndingRequest\x12p\n" +
	"\x1cstepExecutionStartingRequest\x18\b \x01(\v2,.gauge.messages.StepExecutionStartingRequestR\x1cstepExecutionStartingRequest\x12j\n" +
	"\x1astepExecutionEndingRequest\x18\t \x01(\v2*.gauge.messages.StepExecutionEndingRequestR\x1astepExecutionEndingRequest\x12R\n" +
	"\x12executeStepRequest\x18\n" +
	" \x01(\v2\".gauge.messages.ExecuteStepRequestR\x12executeStepRequest\x12^\n" +
	"\x16executionEndingRequest\x18\v \x01(\v2&.gauge.messages.ExecutionEndingRequestR\x16executionEndingRequest\x12U\n" +
	"\x13stepValidateRequest\x18\f \x01(\v2#.gauge.messages.StepValidateRequestR\x13stepValidateRequest\x12X\n" +
	"\x14stepValidateResponse\x18\r \x01(\v2$.gauge.messages.StepValidateResponseR\x14stepValidateResponse\x12a\n" +
	"\x17executionStatusResponse\x18\x0e \x01(\v2'.gauge.messages.ExecutionStatusResponseR\x17executionStatusResponse\x12L\n" +
	"\x10stepNamesRequest\x18\x0f \x01(\v2 .gauge.messages.StepNamesRequestR\x10stepNamesRequest\x12O\n" +
	"\x11stepNamesResponse\x18\x10 \x01(\v2!.gauge.messages.StepNamesResponseR\x11stepNamesResponse\x12X\n" +
	"\x14suiteExecutionResult\x18\x11 \x01(\v2$.gauge.messages.SuiteExecutionResultR\x14suiteExecutionResult\x12R\n" +
	"\x12killProcessRequest\x18\x12 \x01(\v2\".gauge.messages.KillProcessRequestR\x12killProcessRequest\x12p\n" +
	"\x1cscenarioDataStoreInitRequest\x18\x13 \x01(\v2,.gauge.messages.ScenarioDataStoreInitRequestR\x1cscenarioDataStoreInitRequest\x12d\n" +
	"\x18specDataStoreInitRequest\x18\x14 \x01(\v2(.gauge.messages.SpecDataStoreInitRequestR\x18specDataStoreInitRequest\x12g\n" +
	"\x19suiteDataStoreInitRequest\x18\x15 \x01(\v2).gauge.messages.SuiteDataStoreInitRequestR\x19suiteDataStoreInitRequest\x12I\n" +
	"\x0fstepNameRequest\x18\x16 \x01(\v2\x1f.gauge.messages.StepNameRequestR\x0fstepNameRequest\x12L\n" +
	"\x10stepNameResponse\x18\x17 \x01(\v2 .gauge.messages.StepNameResponseR\x10stepNameResponse\x12I\n" +
	"\x0frefactorRequest\x18\x18 \x01(\v2\x1f.gauge.messages.RefactorRequestR\x0frefactorRequest\x12L\n" +
	"\x10refactorResponse\x18\x19 \x01(\v2 .gauge.messages.RefactorResponseR\x10refactorResponse\x12j\n" +
	"\x1aunsupportedMessageResponse\x18\x1a \x01(\v2*.gauge.messages.UnsupportedMessageResponseR\x1aunsupportedMessageResponse\x12L\n" +
	"\x10cacheFileRequest\x18\x1b \x01(\v2 .gauge.messages.CacheFileRequestR\x10cacheFileRequest\x12X\n" +
	"\x14stepPositionsRequest\x18\x1c \x01(\v2$.gauge.messages.StepPositionsRequestR\x14stepPositionsRequest\x12[\n" +
	"\x15stepPositionsResponse\x18\x1d \x01(\v2%.gauge.messages.StepPositionsResponseR\x15stepPositionsResponse\x12s\n" +
	"\x1dimplementationFileListRequest\x18\x1e \x01(\v2-.gauge.messages.ImplementationFileListRequestR\x1dimplementationFileListRequest\x12v\n" +
	"\x1eimplementationFileListResponse\x18\x1f \x01(\v2..gauge.messages.ImplementationFileListResponseR\x1eimplementationFileListResponse\x12s\n" +
	"\x1dstubImplementationCodeRequest\x18  \x01(\v2-.gauge.messages.StubImplementationCodeRequestR\x1dstubImplementationCodeRequest\x124\n" +
	"\bfileDiff\x18! \x01(\v2\x18.gauge.messages.FileDiffR\bfileDiff\x12\x88\x01\n" +
	"$implementationFileGlobPatternRequest\x18\" \x01(\v24.gauge.messages.ImplementationFileGlobPatternRequestR$implementationFileGlobPatternRequest\x12\x8b\x01\n" +
	"%implementationFileGlobPatternResponse\x18# \x01(\v25.gauge.messages.ImplementationFileGlobPatternResponseR%implementationFileGlobPatternResponse\x12d\n" +
	"\x18suiteExecutionResultItem\x18$ \x01(\v2(.gauge.messages.SuiteExecutionResultItemR\x18suiteExecutionResultItem\x127\n" +
	"\tkeepAlive\x18% \x01(\v2\x19.gauge.messages.KeepAliveR\tkeepAlive\x12y\n" +
	"\x1fconceptExecutionStartingRequest\x18& \x01(\v2/.gauge.messages.ConceptExecutionStartingRequestR\x1fconceptExecutionStartingRequest\x12s\n" +
	"\x1dconceptExecutionEndingRequest\x18' \x01(\v2-.gauge.messages.ConceptExecutionEndingRequestR\x1dconceptExecutionEndingRequest\"\xdc\a\n" +
	"\vMessageType\x12\x15\n" +
	"\x11ExecutionStarting\x10\x00\x12\x19\n" +
	"\x15SpecExecutionStarting\x10\x01\x12\x17\n" +
	"\x13SpecExecutionEnding\x10\x02\x12\x1d\n" +
	"\x19ScenarioExecutionStarting\x10\x03\x12\x1b\n" +
	"\x17ScenarioExecutionEnding\x10\x04\x12\x19\n" +
	"\x15StepExecutionStarting\x10\x05\x12\x17\n" +
	"\x13StepExecutionEnding\x10\x06\x12\x0f\n" +
	"\vExecuteStep\x10\a\x12\x13\n" +
	"\x0fExecutionEnding\x10\b\x12\x17\n" +
	"\x13StepValidateRequest\x10\t\x12\x18\n" +
	"\x14StepValidateResponse\x10\n" +
	"\x12\x1b\n" +
	"\x17ExecutionStatusResponse\x10\v\x12\x14\n" +
	"\x10StepNamesRequest\x10\f\x12\x15\n" +
	"\x11StepNamesResponse\x10\r\x12\x16\n" +
	"\x12KillProcessRequest\x10\x0e\x12\x18\n" +
	"\x14SuiteExecutionResult\x10\x0f\x12\x19\n" +
	"\x15ScenarioDataStoreInit\x10\x10\x12\x15\n" +
	"\x11SpecDataStoreInit\x10\x11\x12\x16\n" +
	"\x12SuiteDataStoreInit\x10\x12\x12\x13\n" +
	"\x0fStepNameRequest\x10\x13\x12\x14\n" +
	"\x10StepNameResponse\x10\x14\x12\x13\n" +
	"\x0fRefactorRequest\x10\x15\x12\x14\n" +
	"\x10RefactorResponse\x10\x16\x12\x1e\n" +
	"\x1aUnsupportedMessageResponse\x10\x17\x12\x14\n" +
	"\x10CacheFileRequest\x10\x18\x12\x18\n" +
	"\x14StepPositionsRequest\x10\x19\x12\x19\n" +
	"\x15StepPositionsResponse\x10\x1a\x12!\n" +
	"\x1dImplementationFileListRequest\x10\x1b\x12\"\n" +
	"\x1eImplementationFileListResponse\x10\x1c\x12!\n" +
	"\x1dStubImplementationCodeRequest\x10\x1d\x12\f\n" +
	"\bFileDiff\x10\x1e\x12(\n" +
	"$ImplementationFileGlobPatternRequest\x10\x1f\x12)\n" +
	"%ImplementationFileGlobPatternResponse\x10 \x12\x1c\n" +
	"\x18SuiteExecutionResultItem\x10!\x12\r\n" +
	"\tKeepAlive\x10\"\x12\x1c\n" +
	"\x18ConceptExecutionStarting\x10#\x12\x1a\n" +
	"\x16ConceptExecutionEnding\x10$B\\\n" +
	"\x16com.thoughtworks.gaugeZ1github.com/getgauge/gauge-proto/go/gauge_messages\xaa\x02\x0eGauge.Messagesb\x06proto3"

var (
	file_messages_proto_rawDescOnce sync.Once
	file_messages_proto_rawDescData []byte
)

func file_messages_proto_rawDescGZIP() []byte {
	file_messages_proto_rawDescOnce.Do(func() {
		file_messages_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_messages_proto_rawDesc), len(file_messages_proto_rawDesc)))
	})
	return file_messages_proto_rawDescData
}

var file_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_messages_proto_goTypes = []any{
	(StepValidateResponse_ErrorType)(0),           // 0: gauge.messages.StepValidateResponse.ErrorType
	(CacheFileRequest_FileStatus)(0),              // 1: gauge.messages.CacheFileRequest.FileStatus
	(Message_MessageType)(0),                      // 2: gauge.messages.Message.MessageType
	(*KillProcessRequest)(nil),                    // 3: gauge.messages.KillProcessRequest
	(*ExecutionStatusResponse)(nil),               // 4: gauge.messages.ExecutionStatusResponse
	(*ExecutionStartingRequest)(nil),              // 5: gauge.messages.ExecutionStartingRequest
	(*ExecutionEndingRequest)(nil),                // 6: gauge.messages.ExecutionEndingRequest
	(*SpecExecutionStartingRequest)(nil),          // 7: gauge.messages.SpecExecutionStartingRequest
	(*SpecExecutionEndingRequest)(nil),            // 8: gauge.messages.SpecExecutionEndingRequest
	(*ScenarioExecutionStartingRequest)(nil),      // 9: gauge.messages.ScenarioExecutionStartingRequest
	(*ScenarioExecutionEndingRequest)(nil),        // 10: gauge.messages.ScenarioExecutionEndingRequest
	(*StepExecutionStartingRequest)(nil),          // 11: gauge.messages.StepExecutionStartingRequest
	(*StepExecutionEndingRequest)(nil),            // 12: gauge.messages.StepExecutionEndingRequest
	(*ConceptExecutionStartingRequest)(nil),       // 13: gauge.messages.ConceptExecutionStartingRequest
	(*ConceptExecutionEndingRequest)(nil),         // 14: gauge.messages.ConceptExecutionEndingRequest
	(*ExecutionArg)(nil),                          // 15: gauge.messages.ExecutionArg
	(*ExecutionInfo)(nil),                         // 16: gauge.messages.ExecutionInfo
	(*SpecInfo)(nil),                              // 17: gauge.messages.SpecInfo
	(*ScenarioInfo)(nil),                          // 18: gauge.messages.ScenarioInfo
	(*ScenarioRetriesInfo)(nil),                   // 19: gauge.messages.ScenarioRetriesInfo
	(*StepInfo)(nil),                              // 20: gauge.messages.StepInfo
	(*ExecuteStepRequest)(nil),                    // 21: gauge.messages.ExecuteStepRequest
	(*StepValidateRequest)(nil),                   // 22: gauge.messages.StepValidateRequest
	(*StepValidateResponse)(nil),                  // 23: gauge.messages.StepValidateResponse
	(*SuiteExecutionResult)(nil),                  // 24: gauge.messages.SuiteExecutionResult
	(*SuiteExecutionResultItem)(nil),              // 25: gauge.messages.SuiteExecutionResultItem
	(*StepNamesRequest)(nil),                      // 26: gauge.messages.StepNamesRequest
	(*StepNamesResponse)(nil),                     // 27: gauge.messages.StepNamesResponse
	(*ScenarioDataStoreInitRequest)(nil),          // 28: gauge.messages.ScenarioDataStoreInitRequest
	(*SpecDataStoreInitRequest)(nil),              // 29: gauge.messages.SpecDataStoreInitRequest
	(*SuiteDataStoreInitRequest)(nil),             // 30: gauge.messages.SuiteDataStoreInitRequest
	(*ParameterPosition)(nil),                     // 31: gauge.messages.ParameterPosition
	(*RefactorRequest)(nil),                       // 32: gauge.messages.RefactorRequest
	(*FileChanges)(nil),                           // 33: gauge.messages.FileChanges
	(*RefactorResponse)(nil),                      // 34: gauge.messages.RefactorResponse
	(*StepNameRequest)(nil),                       // 35: gauge.messages.StepNameRequest
	(*StepNameResponse)(nil),                      // 36: gauge.messages.StepNameResponse
	(*UnsupportedMessageResponse)(nil),            // 37: gauge.messages.UnsupportedMessageResponse
	(*CacheFileRequest)(nil),                      // 38: gauge.messages.CacheFileRequest
	(*StepPositionsRequest)(nil),                  // 39: gauge.messages.StepPositionsRequest
	(*StepPositionsResponse)(nil),                 // 40: gauge.messages.StepPositionsResponse
	(*ImplementationFileGlobPatternRequest)(nil),  // 41: gauge.messages.ImplementationFileGlobPatternRequest
	(*ImplementationFileGlobPatternResponse)(nil), // 42: gauge.messages.ImplementationFileGlobPatternResponse
	(*ImplementationFileListRequest)(nil),         // 43: gauge.messages.ImplementationFileListRequest
	(*ImplementationFileListResponse)(nil),        // 44: gauge.messages.ImplementationFileListResponse
	(*StubImplementationCodeRequest)(nil),         // 45: gauge.messages.StubImplementationCodeRequest
	(*TextDiff)(nil),                              // 46: gauge.messages.TextDiff
	(*FileDiff)(nil),                              // 47: gauge.messages.FileDiff
	(*KeepAlive)(nil),                             // 48: gauge.messages.KeepAlive
	(*SpecDetails)(nil),                           // 49: gauge.messages.SpecDetails
	(*Empty)(nil),                                 // 50: gauge.messages.Empty
	(*Message)(nil),                               // 51: gauge.messages.Message
	(*StepPositionsResponse_StepPosition)(nil),    // 52: gauge.messages.StepPositionsResponse.StepPosition
	(*SpecDetails_SpecDetail)(nil),                // 53: gauge.messages.SpecDetails.SpecDetail
	(*ProtoExecutionResult)(nil),                  // 54: gauge.messages.ProtoExecutionResult
	(*ProtoSuiteResult)(nil),                      // 55: gauge.messages.ProtoSuiteResult
	(*ProtoSpecResult)(nil),                       // 56: gauge.messages.ProtoSpecResult
	(*ProtoScenarioResult)(nil),                   // 57: gauge.messages.ProtoScenarioResult
	(*ProtoStepResult)(nil),                       // 58: gauge.messages.ProtoStepResult
	(*Parameter)(nil),                             // 59: gauge.messages.Parameter
	(*ProtoStepValue)(nil),                        // 60: gauge.messages.ProtoStepValue
	(*ProtoItem)(nil),                             // 61: gauge.messages.ProtoItem
	(*Span)(nil),                                  // 62: gauge.messages.Span
	(*ProtoSpec)(nil),                             // 63: gauge.messages.ProtoSpec
	(*Error)(nil),                                 // 64: gauge.messages.Error
}
var file_messages_proto_depIdxs = []int32{
	54, // 0: gauge.messages.ExecutionStatusResponse.executionResult:type_name -> gauge.messages.ProtoExecutionResult
	16, // 1: gauge.messages.ExecutionStartingRequest.currentExecutionInfo:type_name -> gauge.messages.ExecutionInfo
	55, // 2: gauge.messages.ExecutionStartingRequest.suiteResult:type_name -> gauge.messages.ProtoSuiteResult
	16, // 3: gauge.messages.ExecutionEndingRequest.currentExecutionInfo:type_name -> gauge.messages.ExecutionInfo
	55, // 4: gauge.messages.ExecutionEndingRequest.suiteResult:type_name -> gauge.messages.ProtoSuiteResult
	16, // 5: gauge.messages.SpecExecutionStartingRequest.currentExecutionInfo:type_name -> gauge.messages.ExecutionInfo
	56, // 6: gauge.messages.SpecExecutionStartingRequest.specResult:type_name -> gauge.messages.ProtoSpecResult
	16, // 7: gauge.messages.SpecExecutionEndingRequest.currentExecutionInfo:type_name -> gauge.messages.ExecutionInfo
	56, // 8: gauge.messages.SpecExecutionEndingRequest.specResult:type_name -> gauge.messages.ProtoSpecResult
	16, // 9: gauge.messages.ScenarioExecutionStartingRequest.currentExecutionInfo:type_name -> gauge.messages.ExecutionInfo
	57, // 10: gauge.messages.ScenarioExecutionStartingRequest.scenarioResult:type_name -> gauge.messages.ProtoScenarioResult
	16, // 11: gauge.messages.ScenarioExecutionEndingRequest.currentExecutionInfo:type_name -> gauge.messages.ExecutionInfo
	57, // 12: gauge.messages.ScenarioExecutionEndingRequest.scenarioResult:type_name -> gauge.messages.ProtoScenarioResult
	16, // 13: gauge.messages.StepExecutionStartingRequest.currentExecutionInfo:type_name -> gauge.messages.ExecutionInfo
	58, // 14: gauge.messages.StepExecutionStartingRequest.stepResult:type_name -> gauge.messages.ProtoStepResult
	16, // 15: gauge.messages.StepExecutionEndingRequest.currentExecutionInfo:type_name -> gauge.messages.ExecutionInfo
	58, // 16: gauge.messages.StepExecutionEndingRequest.stepResult:type_name -> gauge.messages.ProtoStepResult
	16, // 17: gauge.messages.ConceptExecutionStartingRequest.currentExecutionInfo:type_name -> gauge.messages.ExecutionInfo
	58, // 18: gauge.messages.ConceptExecutionStartingRequest.stepResult:type_name -> gauge.messages.ProtoStepResult
	16, // 19: gauge.messages.ConceptExecutionEndingRequest.currentExecutionInfo:type_name -> gauge.messages.ExecutionInfo
	58, // 20: gauge.messages.ConceptExecutionEndingRequest.stepResult:type_name -> gauge.messages.ProtoStepResult
	17, // 21: gauge.messages.ExecutionInfo.currentSpec:type_name -> gauge.messages.SpecInfo
	18, // 22: gauge.messages.ExecutionInfo.currentScenario:type_name -> gauge.messages.ScenarioInfo
	20, // 23: gauge.messages.ExecutionInfo.currentStep:type_name -> gauge.messages.StepInfo
	15, // 24: gauge.messages.ExecutionInfo.ExecutionArgs:type_name -> gauge.messages.ExecutionArg
	19, // 25: gauge.messages.ScenarioInfo.retries:type_name -> gauge.messages.ScenarioRetriesInfo
	21, // 26: gauge.messages.StepInfo.step:type_name -> gauge.messages.ExecuteStepRequest
	59, // 27: gauge.messages.ExecuteStepRequest.parameters:type_name -> gauge.messages.Parameter
	60, // 28: gauge.messages.StepValidateRequest.stepValue:type_name -> gauge.messages.ProtoStepValue
	0,  // 29: gauge.messages.StepValidateResponse.errorType:type_name -> gauge.messages.StepValidateResponse.ErrorType
	55, // 30: gauge.messages.SuiteExecutionResult.suiteResult:type_name -> gauge.messages.ProtoSuiteResult
	61, // 31: gauge.messages.SuiteExecutionResultItem.resultItem:type_name -> gauge.messages.ProtoItem
	60, // 32: gauge.messages.RefactorRequest.oldStepValue:type_name -> gauge.messages.ProtoStepValue
	60, // 33: gauge.messages.RefactorRequest.newStepValue:type_name -> gauge.messages.ProtoStepValue
	31, // 34: gauge.messages.RefactorRequest.paramPositions:type_name -> gauge.messages.ParameterPosition
	46, // 35: gauge.messages.FileChanges.diffs:type_name -> gauge.messages.TextDiff
	33, // 36: gauge.messages.RefactorResponse.fileChanges:type_name -> gauge.messages.FileChanges
	62, // 37: gauge.messages.StepNameResponse.span:type_name -> gauge.messages.Span
	1,  // 38: gauge.messages.CacheFileRequest.status:type_name -> gauge.messages.CacheFileRequest.FileStatus
	52, // 39: gauge.messages.StepPositionsResponse.stepPositions:type_name -> gauge.messages.StepPositionsResponse.StepPosition
	62, // 40: gauge.messages.TextDiff.span:type_name -> gauge.messages.Span
	46, // 41: gauge.messages.FileDiff.textDiffs:type_name -> gauge.messages.TextDiff
	53, // 42: gauge.messages.SpecDetails.details:type_name -> gauge.messages.SpecDetails.SpecDetail
	2,  // 43: gauge.messages.Message.messageType:type_name -> gauge.messages.Message.MessageType
	5,  // 44: gauge.messages.Message.executionStartingRequest:type_name -> gauge.messages.ExecutionStartingRequest
	7,  // 45: gauge.messages.Message.specExecutionStartingRequest:type_name -> gauge.messages.SpecExecutionStartingRequest
	8,  // 46: gauge.messages.Message.specExecutionEndingRequest:type_name -> gauge.messages.SpecExecutionEndingRequest
	9,  // 47: gauge.messages.Message.scenarioExecutionStartingRequest:type_name -> gauge.messages.ScenarioExecutionStartingRequest
	10, // 48: gauge.messages.Message.scenarioExecutionEndingRequest:type_name -> gauge.messages.ScenarioExecutionEndingRequest
	11, // 49: gauge.messages.Message.stepExecutionStartingRequest:type_name -> gauge.messages.StepExecutionStartingRequest
	12, // 50: gauge.messages.Message.stepExecutionEndingRequest:type_name -> gauge.messages.StepExecutionEndingRequest
	21, // 51: gauge.messages.Message.executeStepRequest:type_name -> gauge.messages.ExecuteStepRequest
	6,  // 52: gauge.messages.Message.executionEndingRequest:type_name -> gauge.messages.ExecutionEndingRequest
	22, // 53: gauge.messages.Message.stepValidateRequest:type_name -> gauge.messages.StepValidateRequest
	23, // 54: gauge.messages.Message.stepValidateResponse:type_name -> gauge.messages.StepValidateResponse
	4,  // 55: gauge.messages.Message.executionStatusResponse:type_name -> gauge.messages.ExecutionStatusResponse
	26, // 56: gauge.messages.Message.stepNamesRequest:type_name -> gauge.messages.StepNamesRequest
	27, // 57: gauge.messages.Message.stepNamesResponse:type_name -> gauge.messages.StepNamesResponse
	24, // 58: gauge.messages.Message.suiteExecutionResult:type_name -> gauge.messages.SuiteExecutionResult
	3,  // 59: gauge.messages.Message.killProcessRequest:type_name -> gauge.messages.KillProcessRequest
	28, // 60: gauge.messages.Message.scenarioDataStoreInitRequest:type_name -> gauge.messages.ScenarioDataStoreInitRequest
	29, // 61: gauge.messages.Message.specDataStoreInitRequest:type_name -> gauge.messages.SpecDataStoreInitRequest
	30, // 62: gauge.messages.Message.suiteDataStoreInitRequest:type_name -> gauge.messages.SuiteDataStoreInitRequest
	35, // 63: gauge.messages.Message.stepNameRequest:type_name -> gauge.messages.StepNameRequest
	36, // 64: gauge.messages.Message.stepNameResponse:type_name -> gauge.messages.StepNameResponse
	32, // 65: gauge.messages.Message.refactorRequest:type_name -> gauge.messages.RefactorRequest
	34, // 66: gauge.messages.Message.refactorResponse:type_name -> gauge.messages.RefactorResponse
	37, // 67: gauge.messages.Message.unsupportedMessageResponse:type_name -> gauge.messages.UnsupportedMessageResponse
	38, // 68: gauge.messages.Message.cacheFileRequest:type_name -> gauge.messages.CacheFileRequest
	39, // 69: gauge.messages.Message.stepPositionsRequest:type_name -> gauge.messages.StepPositionsRequest
	40, // 70: gauge.messages.Message.stepPositionsResponse:type_name -> gauge.messages.StepPositionsResponse
	43, // 71: gauge.messages.Message.implementationFileListRequest:type_name -> gauge.messages.ImplementationFileListRequest
	44, // 72: gauge.messages.Message.implementationFileListResponse:type_name -> gauge.messages.ImplementationFileListResponse
	45, // 73: gauge.messages.Message.stubImplementationCodeRequest:type_name -> gauge.messages.StubImplementationCodeRequest
	47, // 74: gauge.messages.Message.fileDiff:type_name -> gauge.messages.FileDiff
	41, // 75: gauge.messages.Message.implementationFileGlobPatternRequest:type_name -> gauge.messages.ImplementationFileGlobPatternRequest
	42, // 76: gauge.messages.Message.implementationFileGlobPatternResponse:type_name -> gauge.messages.ImplementationFileGlobPatternResponse
	25, // 77: gauge.messages.Message.suiteExecutionResultItem:type_name -> gauge.messages.SuiteExecutionResultItem
	48, // 78: gauge.messages.Message.keepAlive:type_name -> gauge.messages.KeepAlive
	13, // 79: gauge.messages.Message.conceptExecutionStartingRequest:type_name -> gauge.messages.ConceptExecutionStartingRequest
	14, // 80: gauge.messages.Message.conceptExecutionEndingRequest:type_name -> gauge.messages.ConceptExecutionEndingRequest
	62, // 81: gauge.messages.StepPositionsResponse.StepPosition.span:type_name -> gauge.messages.Span
	63, // 82: gauge.messages.SpecDetails.SpecDetail.spec:type_name -> gauge.messages.ProtoSpec
	64, // 83: gauge.messages.SpecDetails.SpecDetail.parseErrors:type_name -> gauge.messages.Error
	84, // [84:84] is the sub-list for method output_type
	84, // [84:84] is the sub-list for method input_type
	84, // [84:84] is the sub-list for extension type_name
	84, // [84:84] is the sub-list for extension extendee
	0,  // [0:84] is the sub-list for field type_name
}

func init() { file_messages_proto_init() }
func file_messages_proto_init() {
	if File_messages_proto != nil {
		return
	}
	file_spec_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_messages_proto_rawDesc), len(file_messages_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_proto_goTypes,
		DependencyIndexes: file_messages_proto_depIdxs,
		EnumInfos:         file_messages_proto_enumTypes,
		MessageInfos:      file_messages_proto_msgTypes,
	}.Build()
	File_messages_proto = out.File
	file_messages_proto_goTypes = nil
	file_messages_proto_depIdxs = nil
}
